
/* global
atom
jasmine describe beforeEach it xit runs expect waitsForPromise
 */

(function() {
  var NUM_ALPHA_TEST_WORDS, NUM_CAMEL_SPECIFIC_MATCHES, NUM_CAMEL_WORDS, NUM_COLLAPSIBLE_WORDS, NUM_ENGLISH_TEXT, NUM_TOTAL_WORDS, path;

  path = require('path');

  NUM_ALPHA_TEST_WORDS = 26 * 3;

  NUM_ENGLISH_TEXT = 8 - 2;

  NUM_COLLAPSIBLE_WORDS = 19;

  NUM_CAMEL_WORDS = 3;

  NUM_TOTAL_WORDS = NUM_ALPHA_TEST_WORDS + NUM_ENGLISH_TEXT + NUM_COLLAPSIBLE_WORDS + NUM_CAMEL_WORDS;

  NUM_CAMEL_SPECIFIC_MATCHES = 4 + 5 + 3;

  describe("Jumpy with non default settings on", function() {
    var jumpyPromise, textEditor, textEditorElement, _ref;
    _ref = [], textEditor = _ref[0], textEditorElement = _ref[1], jumpyPromise = _ref[2];
    beforeEach(function() {
      var workspaceElement;
      atom.project.setPaths([path.join(__dirname, 'fixtures')]);
      workspaceElement = atom.views.getView(atom.workspace);
      workspaceElement.style.height = "5000px";
      workspaceElement.style.width = "5000px";
      jasmine.attachToDOM(workspaceElement);
      atom.config.set('jumpy.highContrast', true);
      atom.config.set('jumpy.fontSize', .50);
      atom.config.set('jumpy.useHomingBeaconEffectOnJumps', false);
      atom.config.set('jumpy.matchPattern', '([\\w]){2,}');
      waitsForPromise(function() {
        return atom.workspace.open('test_text.md');
      });
      runs(function() {
        textEditor = atom.workspace.getActiveTextEditor();
        textEditorElement = atom.views.getView(textEditor);
        jumpyPromise = atom.packages.activatePackage('jumpy');
        textEditor.setCursorBufferPosition([1, 1]);
        return atom.commands.dispatch(textEditorElement, 'jumpy:toggle');
      });
      return waitsForPromise(function() {
        return jumpyPromise;
      });
    });
    describe("when the jumpy:toggle event is triggered", function() {
      it("draws correctly colored labels", function() {
        return expect(textEditor.getOverlayDecorations()[0].getProperties().item.classList.contains('high-contrast')).toBe(true);
      });
      return it("draws labels of the right font size", function() {
        return expect(textEditor.getOverlayDecorations()[0].getProperties().item.style.fontSize).toBe('50%');
      });
    });
    describe("when the jumpy:toggle event is triggered and a jump is performed", function() {
      return xit("contains no beacon", function() {
        expect(textEditorElement.find('.cursors .cursor')[0].classList.contains('beacon')).toBe(false);
        atom.commands.dispatch(textEditorElement, 'jumpy:a');
        atom.commands.dispatch(textEditorElement, 'jumpy:c');
        return expect(textEditorElement.shadowRoot.querySelectorAll('.cursors .cursor')[0].classList.contains('beacon')).toBe(false);
      });
    });
    describe("when a custom match (jumpy default) is used", function() {
      return it("draws correct labels", function() {
        var labels;
        labels = textEditor.getOverlayDecorations();
        expect(labels.length).toBe(NUM_TOTAL_WORDS);
        expect(labels[0].getProperties().item.textContent).toBe('aa');
        expect(labels[1].getProperties().item.textContent).toBe('ab');
        expect(labels[82].getProperties().item.textContent).toBe('de');
        return expect(labels[83].getProperties().item.textContent).toBe('df');
      });
    });
    return describe("when a custom match is used (camel case)", function() {
      return it("draws correct labels and jumps appropriately", function() {
        var cursorPosition, labels;
        atom.commands.dispatch(textEditorElement, 'jumpy:clear');
        atom.config.set('jumpy.matchPattern', '([A-Z]+([0-9a-z])*)|[a-z0-9]{2,}');
        atom.commands.dispatch(textEditorElement, 'jumpy:toggle');
        labels = textEditor.getOverlayDecorations();
        expect(labels.length).toBe(NUM_TOTAL_WORDS + NUM_CAMEL_SPECIFIC_MATCHES);
        expect(labels[0].getProperties().item.textContent).toBe('aa');
        expect(labels[1].getProperties().item.textContent).toBe('ab');
        expect(labels[82].getProperties().item.textContent).toBe('de');
        expect(labels[83].getProperties().item.textContent).toBe('df');
        atom.commands.dispatch(textEditorElement, 'jumpy:e');
        atom.commands.dispatch(textEditorElement, 'jumpy:a');
        cursorPosition = textEditor.getCursorBufferPosition();
        expect(cursorPosition.row).toBe(30);
        expect(cursorPosition.column).toBe(4);
        atom.commands.dispatch(textEditorElement, 'jumpy:toggle');
        atom.commands.dispatch(textEditorElement, 'jumpy:e');
        atom.commands.dispatch(textEditorElement, 'jumpy:l');
        cursorPosition = textEditor.getCursorBufferPosition();
        expect(cursorPosition.row).toBe(32);
        return expect(cursorPosition.column).toBe(5);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2lnYXdhdGFpaWNoaS8uYXRvbS9wYWNrYWdlcy9qdW1weS9zcGVjL2p1bXB5LXNldHRpbmdzLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQTs7O0dBQUE7QUFBQTtBQUFBO0FBQUEsTUFBQSxpSUFBQTs7QUFBQSxFQUlBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQUpQLENBQUE7O0FBQUEsRUFNQSxvQkFBQSxHQUF1QixFQUFBLEdBQUssQ0FONUIsQ0FBQTs7QUFBQSxFQU9BLGdCQUFBLEdBQW1CLENBQUEsR0FBSSxDQVB2QixDQUFBOztBQUFBLEVBUUEscUJBQUEsR0FBd0IsRUFSeEIsQ0FBQTs7QUFBQSxFQVNBLGVBQUEsR0FBa0IsQ0FUbEIsQ0FBQTs7QUFBQSxFQVVBLGVBQUEsR0FDSSxvQkFBQSxHQUNBLGdCQURBLEdBRUEscUJBRkEsR0FHQSxlQWRKLENBQUE7O0FBQUEsRUFnQkEsMEJBQUEsR0FBNkIsQ0FBQSxHQUFJLENBQUosR0FBUSxDQWhCckMsQ0FBQTs7QUFBQSxFQWtCQSxRQUFBLENBQVMsb0NBQVQsRUFBK0MsU0FBQSxHQUFBO0FBQzNDLFFBQUEsaURBQUE7QUFBQSxJQUFBLE9BQWdELEVBQWhELEVBQUMsb0JBQUQsRUFBYSwyQkFBYixFQUFnQyxzQkFBaEMsQ0FBQTtBQUFBLElBRUEsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNQLFVBQUEsZ0JBQUE7QUFBQSxNQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBYixDQUFzQixDQUFDLElBQUksQ0FBQyxJQUFMLENBQVUsU0FBVixFQUFxQixVQUFyQixDQUFELENBQXRCLENBQUEsQ0FBQTtBQUFBLE1BRUEsZ0JBQUEsR0FBbUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFYLENBQW1CLElBQUksQ0FBQyxTQUF4QixDQUZuQixDQUFBO0FB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

//# sourceURL=/Users/igawataiichi/.atom/packages/jumpy/spec/jumpy-settings-spec.coffee
