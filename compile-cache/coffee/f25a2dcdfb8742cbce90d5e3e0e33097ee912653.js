(function() {
  var RefCountedTokenList;

  RefCountedTokenList = require('../lib/ref-counted-token-list');

  describe('RefCountedTokenList', function() {
    var list;
    list = [][0];
    beforeEach(function() {
      return list = new RefCountedTokenList;
    });
    describe("::refCountForToken()", function() {
      return it("returns the correct count", function() {
        list.addToken('abc');
        expect(list.refCountForToken('abc')).toBe(1);
        list.addToken('abc');
        list.addToken('def');
        expect(list.refCountForToken('abc')).toBe(2);
        list.removeToken('abc');
        expect(list.refCountForToken('abc')).toBe(1);
        list.removeToken('abc');
        expect(list.refCountForToken('abc')).toBe(0);
        list.removeToken('abc');
        return expect(list.refCountForToken('abc')).toBe(0);
      });
    });
    describe("when tokens are added to and removed from the list", function() {
      return it("maintains the token in the list until there are no more references", function() {
        expect(list.getTokens()).toEqual([]);
        list.addToken('abc');
        expect(list.getTokens()).toEqual(['abc']);
        expect(list.refCountForToken('abc')).toBe(1);
        list.addToken('abc');
        list.addToken('def');
        expect(list.getTokens()).toEqual(['abc', 'def']);
        expect(list.refCountForToken('abc')).toBe(2);
        list.removeToken('abc');
        expect(list.getTokens()).toEqual(['abc', 'def']);
        expect(list.refCountForToken('abc')).toBe(1);
        list.removeToken('def');
        expect(list.getTokens()).toEqual(['abc']);
        list.removeToken('abc');
        expect(list.getTokens()).toEqual([]);
        list.removeToken('abc');
        return expect(list.getTokens()).toEqual([]);
      });
    });
    return describe("when object tokens are added to and removed from the list", function() {
      describe("when the same tokens are used", function() {
        return it("maintains the token in the list until there are no more references", function() {
          var abcToken, defToken;
          expect(list.getTokens()).toEqual([]);
          abcToken = {
            text: 'abc'
          };
          defToken = {
            text: 'def'
          };
          list.addToken(abcToken, 'abc');
          expect(list.getTokens()).toEqual([abcToken]);
          list.addToken(abcToken, 'abc');
          list.addToken(defToken, 'def');
          expect(list.getTokens()).toEqual([abcToken, defToken]);
          list.removeToken(abcToken, 'abc');
          expect(list.getTokens()).toEqual([abcToken, defToken]);
          list.removeToken(defToken, 'def');
          expect(list.getTokens()).toEqual([abcToken]);
          list.removeToken(abcToken, 'abc');
          expect(list.getTokens()).toEqual([]);
          list.removeToken(abcToken, 'abc');
          return expect(list.getTokens()).toEqual([]);
        });
      });
      return describe("when tokens with the same key are used", function() {
        return it("maintains the token in the list until there are no more references", function() {
          expect(list.getTokens()).toEqual([]);
          list.addToken({
            text: 'abc'
          }, 'abc');
          expect(list.getTokens()).toEqual([
            {
              text: 'abc'
            }
          ]);
          list.addToken({
            text: 'abc'
          }, 'abc');
          list.addToken({
            text: 'def'
          }, 'def');
          expect(list.getTokens()).toEqual([
            {
              text: 'abc'
            }, {
              text: 'def'
            }
          ]);
          expect(list.removeToken({
            text: 'abc'
          }, 'abc')).toBe(true);
          expect(list.getTokens()).toEqual([
            {
              text: 'abc'
            }, {
              text: 'def'
            }
          ]);
          expect(list.removeToken('def')).toBe(true);
          expect(list.getTokens()).toEqual([
            {
              text: 'abc'
            }
          ]);
          expect(list.removeToken('abc')).toBe(true);
          expect(list.getTokens()).toEqual([]);
          expect(list.removeToken('abc')).toBe(false);
          return expect(list.getTokens()).toEqual([]);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2lnYXdhdGFpaWNoaS8uYXRvbS9wYWNrYWdlcy9hdXRvY29tcGxldGUtcGx1cy9zcGVjL3JlZi1jb3VudGVkLXRva2VuLWxpc3Qtc3BlYy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsbUJBQUE7O0FBQUEsRUFBQSxtQkFBQSxHQUFzQixPQUFBLENBQVEsK0JBQVIsQ0FBdEIsQ0FBQTs7QUFBQSxFQUVBLFFBQUEsQ0FBUyxxQkFBVCxFQUFnQyxTQUFBLEdBQUE7QUFDOUIsUUFBQSxJQUFBO0FBQUEsSUFBQyxPQUFRLEtBQVQsQ0FBQTtBQUFBLElBQ0EsVUFBQSxDQUFXLFNBQUEsR0FBQTthQUNULElBQUEsR0FBTyxHQUFBLENBQUEsb0JBREU7SUFBQSxDQUFYLENBREEsQ0FBQTtBQUFBLElBSUEsUUFBQSxDQUFTLHNCQUFULEVBQWlDLFNBQUEsR0FBQTthQUMvQixFQUFBLENBQUcsMkJBQUgsRUFBZ0MsU0FBQSxHQUFBO0FBQzlCLFFBQUEsSUFBSSxDQUFDLFFBQUwsQ0FBYyxLQUFkLENBQUEsQ0FBQTtBQUFBLFFBQ0EsTUFBQSxDQUFPLElBQUksQ0FBQyxnQkFBTCxDQUFzQixLQUF0QixDQUFQLENBQW9DLENBQUMsSUFBckMsQ0FBMEMsQ0FBMUMsQ0FEQSxDQUFBO0FBQUEsUUFHQSxJQUFJLENBQUMsUUFBTCxDQUFjLEtBQWQsQ0FIQSxDQUFBO0FBQUEsUUFJQSxJQUFJLENBQUMsUUFBTCxDQUFjLEtBQWQsQ0FKQSxDQUFBO0FBQUEsUUFLQSxNQUFBLENBQU8sSUFBSSxDQUFDLGdCQUFMLENBQXNCLEtBQXRCLENBQVAsQ0FBb0MsQ0FBQyxJQUFyQyxDQUEwQyxDQUExQyxDQUxBLENBQUE7QUFBQSxRQU9BLElBQUksQ0FBQyxXQUFMLENBQWlCLEtBQWpCLENBUEEsQ0FBQTtBQUFBLFFBUUEsTUFBQSxD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

//# sourceURL=/Users/igawataiichi/.atom/packages/autocomplete-plus/spec/ref-counted-token-list-spec.coffee
