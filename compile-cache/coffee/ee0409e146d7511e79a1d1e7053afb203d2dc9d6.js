(function() {
  var packagesToTest;

  packagesToTest = {
    SASS: {
      name: 'language-sass',
      file: 'test.scss'
    }
  };

  describe("CSS property name and value autocompletions", function() {
    var editor, getCompletions, provider, _ref;
    _ref = [], editor = _ref[0], provider = _ref[1];
    getCompletions = function() {
      var cursor, end, prefix, request, start;
      cursor = editor.getLastCursor();
      start = cursor.getBeginningOfCurrentWordBufferPosition();
      end = cursor.getBufferPosition();
      prefix = editor.getTextInRange([start, end]);
      request = {
        editor: editor,
        bufferPosition: end,
        scopeDescriptor: cursor.getScopeDescriptor(),
        prefix: prefix
      };
      return provider.getSuggestions(request);
    };
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage('autocomplete-sass');
      });
      runs(function() {
        return provider = atom.packages.getActivePackage('autocomplete-sass').mainModule.getProvider();
      });
      return waitsFor(function() {
        return Object.keys(provider.properties).length > 0;
      });
    });
    return describe("SASS files", function() {
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.packages.activatePackage('language-sass');
        });
        waitsForPromise(function() {
          return atom.workspace.open('test.sass');
        });
        return runs(function() {
          return editor = atom.workspace.getActiveTextEditor();
        });
      });
      it("autocompletes property names with a prefix", function() {
        var completions;
        editor.setText("body\n  d");
        editor.setCursorBufferPosition([1, 3]);
        completions = getCompletions();
        expect(completions[0].text).toBe('display: ');
        expect(completions[0].displayText).toBe('display');
        expect(completions[0].type).toBe('property');
        expect(completions[0].replacementPrefix).toBe('d');
        expect(completions[0].description.length).toBeGreaterThan(0);
        expect(completions[0].descriptionMoreURL.length).toBeGreaterThan(0);
        expect(completions[1].text).toBe('direction: ');
        expect(completions[1].displayText).toBe('direction');
        expect(completions[1].type).toBe('property');
        expect(completions[1].replacementPrefix).toBe('d');
        editor.setText("body\n  D");
        editor.setCursorBufferPosition([1, 3]);
        completions = getCompletions();
        expect(completions.length).toBe(11);
        expect(completions[0].text).toBe('display: ');
        expect(completions[1].text).toBe('direction: ');
        expect(completions[1].replacementPrefix).toBe('D');
        editor.setText("body\n  d:");
        editor.setCursorBufferPosition([1, 3]);
        completions = getCompletions();
        expect(completions[0].text).toBe('display: ');
        expect(completions[1].text).toBe('direction: ');
        editor.setText("body\n  bord");
        editor.setCursorBufferPosition([1, 6]);
        completions = getCompletions();
        expect(completions[0].text).toBe('border: ');
        expect(completions[0].displayText).toBe('border');
        return expect(completions[0].replacementPrefix).toBe('bord');
      });
      it("triggers autocomplete when an property name has been inserted", function() {
        var args, suggestion;
        spyOn(atom.commands, 'dispatch');
        suggestion = {
          type: 'property',
          text: 'whatever'
        };
        provider.onDidInsertSuggestion({
          editor: editor,
          suggestion: suggestion
        });
        advanceClock(1);
        expect(atom.commands.dispatch).toHaveBeenCalled();
        args = atom.commands.dispatch.mostRecentCall.args;
        expect(args[0].tagName.toLowerCase()).toBe('atom-text-editor');
        return expect(args[1]).toBe('autocomplete-plus:activate');
      });
      it("autocompletes property values without a prefix", function() {
        var completion, completions, _i, _j, _len, _len1, _results;
        editor.setText("body\n  display:");
        editor.setCursorBufferPosition([1, 10]);
        completions = getCompletions();
        expect(completions.length).toBe(21);
        for (_i = 0, _len = completions.length; _i < _len; _i++) {
          completion = completions[_i];
          expect(completion.text.length).toBeGreaterThan(0);
          expect(completion.description.length).toBeGreaterThan(0);
          expect(completion.descriptionMoreURL.length).toBeGreaterThan(0);
        }
        editor.setText("body\n  display:");
        editor.setCursorBufferPosition([2, 0]);
        completions = getCompletions();
        expect(completions.length).toBe(21);
        _results = [];
        for (_j = 0, _len1 = completions.length; _j < _len1; _j++) {
          completion = completions[_j];
          _results.push(expect(completion.text.length).toBeGreaterThan(0));
        }
        return _results;
      });
      it("autocompletes property values with a prefix", function() {
        var completions;
        editor.setText("body\n  display: i");
        editor.setCursorBufferPosition([1, 12]);
        completions = getCompletions();
        expect(completions[0].text).toBe('inline');
        expect(completions[0].description.length).toBeGreaterThan(0);
        expect(completions[0].descriptionMoreURL.length).toBeGreaterThan(0);
        expect(completions[1].text).toBe('inline-block');
        expect(completions[2].text).toBe('inline-flex');
        expect(completions[3].text).toBe('inline-grid');
        expect(completions[4].text).toBe('inline-table');
        expect(completions[5].text).toBe('inherit');
        editor.setText("body\n  display: I");
        editor.setCursorBufferPosition([1, 12]);
        completions = getCompletions();
        expect(completions.length).toBe(6);
        expect(completions[0].text).toBe('inline');
        expect(completions[1].text).toBe('inline-block');
        expect(completions[2].text).toBe('inline-flex');
        expect(completions[3].text).toBe('inline-grid');
        expect(completions[4].text).toBe('inline-table');
        return expect(completions[5].text).toBe('inherit');
      });
      describe("tags", function() {
        it("autocompletes with a prefix", function() {
          var completions;
          editor.setText("ca");
          editor.setCursorBufferPosition([0, 2]);
          completions = getCompletions();
          expect(completions.length).toBe(7);
          expect(completions[0].text).toBe('canvas');
          expect(completions[0].type).toBe('tag');
          expect(completions[0].description).toBe('Selector for <canvas> elements');
          expect(completions[1].text).toBe('code');
          editor.setText("canvas,ca");
          editor.setCursorBufferPosition([0, 9]);
          completions = getCompletions();
          expect(completions.length).toBe(7);
          expect(completions[0].text).toBe('canvas');
          editor.setText("canvas ca");
          editor.setCursorBufferPosition([0, 9]);
          completions = getCompletions();
          expect(completions.length).toBe(7);
          expect(completions[0].text).toBe('canvas');
          editor.setText("canvas, ca");
          editor.setCursorBufferPosition([0, 10]);
          completions = getCompletions();
          expect(completions.length).toBe(7);
          return expect(completions[0].text).toBe('canvas');
        });
        return it("does not autocomplete when prefix is preceded by class or id char", function() {
          var completions;
          editor.setText(".ca");
          editor.setCursorBufferPosition([0, 3]);
          completions = getCompletions();
          expect(completions).toBe(null);
          editor.setText("#ca");
          editor.setCursorBufferPosition([0, 3]);
          completions = getCompletions();
          return expect(completions).toBe(null);
        });
      });
      return describe("pseudo selectors", function() {
        it("autocompletes without a prefix", function() {
          var completion, completions, text, _i, _len, _results;
          editor.setText("div:");
          editor.setCursorBufferPosition([0, 4]);
          completions = getCompletions();
          expect(completions.length).toBe(43);
          _results = [];
          for (_i = 0, _len = completions.length; _i < _len; _i++) {
            completion = completions[_i];
            text = completion.text || completion.snippet;
            expect(text.length).toBeGreaterThan(0);
            _results.push(expect(completion.type).toBe('pseudo-selector'));
          }
          return _results;
        });
        xit("autocompletes with a prefix", function() {
          var completions;
          editor.setText("div:f {\n}");
          editor.setCursorBufferPosition([0, 5]);
          completions = getCompletions();
          expect(completions.length).toBe(5);
          expect(completions[0].text).toBe(':first');
          expect(completions[0].type).toBe('pseudo-selector');
          expect(completions[0].description.length).toBeGreaterThan(0);
          return expect(completions[0].descriptionMoreURL.length).toBeGreaterThan(0);
        });
        xit("autocompletes with arguments", function() {
          var completions;
          editor.setText("div:nth {\n}");
          editor.setCursorBufferPosition([0, 7]);
          completions = getCompletions();
          expect(completions.length).toBe(4);
          expect(completions[0].snippet).toBe(':nth-child(${1:an+b})');
          expect(completions[0].type).toBe('pseudo-selector');
          expect(completions[0].description.length).toBeGreaterThan(0);
          return expect(completions[0].descriptionMoreURL.length).toBeGreaterThan(0);
        });
        return xit("autocompletes when nothing precedes the colon", function() {
          var completions;
          editor.setText(":f {\n}");
          editor.setCursorBufferPosition([0, 2]);
          completions = getCompletions();
          expect(completions.length).toBe(5);
          return expect(completions[0].text).toBe(':first');
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/igawataiichi/.atom/packages/autocomplete-sass/spec/provider-spec.coffee
