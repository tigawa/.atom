(function() {
  var FlowDialog, git;

  git = require('../../lib/git');

  FlowDialog = require('../../lib/dialogs/flow-dialog');

  describe("FlowDialog", function() {
    var flowDialog, gitControlView, stashPopSpy, stashSaveSpy;
    flowDialog = null;
    stashSaveSpy = null;
    stashPopSpy = null;
    gitControlView = null;
    beforeEach(function() {
      flowDialog = new FlowDialog();
      spyOn(git, 'getLocalBranch').andReturn('master');
      return flowDialog.activate(['master']);
    });
    it("should not show 'No Tag' option when 'init' flow type is selected", function() {
      flowDialog.flowType.val('init');
      flowDialog.flowTypeChange();
      expect(flowDialog.noTag.css('display')).toBe('none');
      return expect(flowDialog.labelNoTag.css('display')).toBe('none');
    });
    it("should not show 'No Tag' option when 'feature' flow type is selected", function() {
      flowDialog.flowType.val('feature');
      flowDialog.flowTypeChange();
      expect(flowDialog.noTag.css('display')).toBe('none');
      return expect(flowDialog.labelNoTag.css('display')).toBe('none');
    });
    it("should not show 'No Tag' option when 'hotfix' type and 'start' flow action is selected", function() {
      flowDialog.flowType.val('hotfix');
      flowDialog.flowTypeChange();
      flowDialog.flowAction.val('start');
      flowDialog.flowActionChange();
      expect(flowDialog.noTag.css('display')).toBe('none');
      return expect(flowDialog.labelNoTag.css('display')).toBe('none');
    });
    it("should not show 'No Tag' option when 'hotfix' type and 'publish' flow action is selected", function() {
      flowDialog.flowType.val('hotfix');
      flowDialog.flowTypeChange();
      flowDialog.flowAction.val('publish');
      flowDialog.flowActionChange();
      expect(flowDialog.noTag.css('display')).toBe('none');
      return expect(flowDialog.labelNoTag.css('display')).toBe('none');
    });
    it("should not show 'No Tag' option when 'hotfix' type and 'pull' flow action is selected", function() {
      flowDialog.flowType.val('hotfix');
      flowDialog.flowTypeChange();
      flowDialog.flowAction.val('pull');
      flowDialog.flowActionChange();
      expect(flowDialog.noTag.css('display')).toBe('none');
      return expect(flowDialog.labelNoTag.css('display')).toBe('none');
    });
    it("should not show 'No Tag' option when 'release' type and 'start' flow action is selected", function() {
      flowDialog.flowType.val('release');
      flowDialog.flowTypeChange();
      flowDialog.flowAction.val('start');
      flowDialog.flowActionChange();
      expect(flowDialog.noTag.css('display')).toBe('none');
      return expect(flowDialog.labelNoTag.css('display')).toBe('none');
    });
    it("should not show 'No Tag' option when 'release' type and 'publish' flow action is selected", function() {
      flowDialog.flowType.val('release');
      flowDialog.flowTypeChange();
      flowDialog.flowAction.val('publish');
      flowDialog.flowActionChange();
      expect(flowDialog.noTag.css('display')).toBe('none');
      return expect(flowDialog.labelNoTag.css('display')).toBe('none');
    });
    it("should not show 'No Tag' option when 'release' type and 'pull' flow action is selected", function() {
      flowDialog.flowType.val('release');
      flowDialog.flowTypeChange();
      flowDialog.flowAction.val('pull');
      flowDialog.flowActionChange();
      expect(flowDialog.noTag.css('display')).toBe('none');
      return expect(flowDialog.labelNoTag.css('display')).toBe('none');
    });
    it("should show 'No Tag' option when 'hotfix' type and 'finish' flow action is selected", function() {
      flowDialog.flowType.val('hotfix');
      flowDialog.flowTypeChange();
      flowDialog.flowAction.val('finish');
      flowDialog.flowActionChange();
      expect(flowDialog.noTag.css('display')).not.toBe('none');
      return expect(flowDialog.labelNoTag.css('display')).not.toBe('none');
    });
    it("should show 'No Tag' option when 'release' type and 'finish' flow action is selected", function() {
      flowDialog.flowType.val('release');
      flowDialog.flowTypeChange();
      flowDialog.flowAction.val('finish');
      flowDialog.flowActionChange();
      expect(flowDialog.noTag.css('display')).not.toBe('none');
      return expect(flowDialog.labelNoTag.css('display')).not.toBe('none');
    });
    it("should hide the 'No Tag' option when switched away from 'finish' flow action", function() {
      flowDialog.flowType.val('release');
      flowDialog.flowTypeChange();
      flowDialog.flowAction.val('finish');
      flowDialog.flowActionChange();
      expect(flowDialog.noTag.css('display')).not.toBe('none');
      expect(flowDialog.labelNoTag.css('display')).not.toBe('none');
      flowDialog.flowAction.val('start');
      flowDialog.flowActionChange();
      expect(flowDialog.noTag.css('display')).toBe('none');
      return expect(flowDialog.labelNoTag.css('display')).toBe('none');
    });
    it("should call git with -n option when 'No tag' is checked", function() {
      var flowSpy;
      flowDialog.flowType.val('release');
      flowDialog.flowTypeChange();
      flowDialog.flowAction.val('finish');
      flowDialog.flowActionChange();
      flowDialog.branchName.val('master');
      flowDialog.noTag.click();
      flowSpy = jasmine.createSpy('flow');
      flowDialog.parentView = {
        flow: flowSpy
      };
      flowDialog.flow();
      return expect(flowSpy).toHaveBeenCalledWith('release', 'finish -n', 'master');
    });
    return it("should call git without -n option when 'No tag' is not checked", function() {
      var flowSpy;
      flowDialog.flowType.val('release');
      flowDialog.flowTypeChange();
      flowDialog.flowAction.val('finish');
      flowDialog.flowActionChange();
      flowDialog.branchName.val('master');
      flowSpy = jasmine.createSpy('flow');
      flowDialog.parentView = {
        flow: flowSpy
      };
      flowDialog.flow();
      return expect(flowSpy).toHaveBeenCalledWith('release', 'finish', 'master');
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/igawataiichi/.atom/packages/git-control/spec/dialogs/flow-dialog-spec.coffee
