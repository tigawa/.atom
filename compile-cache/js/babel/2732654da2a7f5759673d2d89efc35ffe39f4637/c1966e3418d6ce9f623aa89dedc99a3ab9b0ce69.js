Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _atom = require('atom');

var _sbEventKit = require('sb-event-kit');

var _helpers = require('../helpers');

let PanelDelegate = class PanelDelegate {

  constructor(panel) {
    this.panel = panel;
    this.emitter = new _sbEventKit.Emitter();
    this.messages = [];
    this.subscriptions = new _sbEventKit.CompositeDisposable();

    this.subscriptions.add(atom.config.observe('linter-ui-default.panelRepresents', panelRepresents => {
      const notInitial = typeof this.panelRepresents !== 'undefined';
      this.panelRepresents = panelRepresents;
      if (notInitial) {
        this.update();
      }
    }));
    this.subscriptions.add(atom.config.observe('linter-ui-default.panelHeight', panelHeight => {
      const notInitial = typeof this.panelHeight !== 'undefined';
      this.panelHeight = panelHeight;
      if (notInitial) {
        this.emitter.emit('observe-panel-config');
      }
    }));
    this.subscriptions.add(atom.config.observe('linter-ui-default.panelTakesMinimumHeight', panelTakesMinimumHeight => {
      const notInitial = typeof this.panelTakesMinimumHeight !== 'undefined';
      this.panelTakesMinimumHeight = panelTakesMinimumHeight;
      if (notInitial) {
        this.emitter.emit('observe-panel-config');
      }
    }));

    let changeSubscription;
    this.subscriptions.add(atom.workspace.observeActivePaneItem(paneItem => {
      if (changeSubscription) {
        changeSubscription.dispose();
        changeSubscription = null;
      }
      this.visibility = atom.workspace.isTextEditor(paneItem);
      this.emitter.emit('observe-visibility', this.visibility);
      if (this.visibility) {
        if (this.panelRepresents !== 'Entire Project') {
          this.update();
        }
        let oldRow = -1;
        changeSubscription = paneItem.onDidChangeCursorPosition(({ newBufferPosition }) => {
          if (oldRow !== newBufferPosition.row && this.panelRepresents === 'Current Line') {
            oldRow = newBufferPosition.row;
            this.update();
          }
        });
      }
      const shouldUpdate = typeof this.visibility !== 'undefined' && this.panelRepresents !== 'Entire Project';

      if (this.visibility && shouldUpdate) {
        this.update();
      }
    }));
    this.subscriptions.add(function () {
      if (changeSubscription) {
        changeSubscription.dispose();
      }
    });
  }
  get filteredMessages() {
    let filteredMessages = [];
    if (this.panelRepresents === 'Entire Project') {
      filteredMessages = this.messages;
    } else if (this.panelRepresents === 'Current File') {
      const activeEditor = atom.workspace.getActiveTextEditor();
      if (!activeEditor) return [];
      filteredMessages = (0, _helpers.filterMessages)(this.messages, activeEditor.getPath());
    } else if (this.panelRepresents === 'Current Line') {
      const activeEditor = atom.workspace.getActiveTextEditor();
      if (!activeEditor) return [];
      const activeLine = activeEditor.getCursors()[0].getBufferRow();
      filteredMessages = (0, _helpers.filterMessagesByRangeOrPoint)(this.messages, activeEditor.getPath(), _atom.Range.fromObject([[activeLine, 0], [activeLine, Infinity]]));
    }
    return filteredMessages;
  }
  update(messages = null) {
    if (Array.isArray(messages)) {
      this.messages = messages;
    }
    this.emitter.emit('observe-messages', this.filteredMessages);
  }
  updatePanelHeight(panelHeight) {
    atom.config.set('linter-ui-default.panelHeight', panelHeight);
  }
  onDidChangeMessages(callback) {
    return this.emitter.on('observe-messages', callback);
  }
  onDidChangeVisibility(callback) {
    return this.emitter.on('observe-visibility', callback);
  }
  onDidChangePanelConfig(callback) {
    return this.emitter.on('observe-panel-config', callback);
  }
  setPanelVisibility(visibility) {
    if (visibility && !this.panel.isVisible()) {
      this.panel.show();
    } else if (!visibility && this.panel.isVisible()) {
      this.panel.hide();
    }
  }
  dispose() {
    this.subscriptions.dispose();
  }
};
exports.default = PanelDelegate;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,