Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _atom = require('atom');

var _sbDebounce = require('sb-debounce');

var _sbDebounce2 = _interopRequireDefault(_sbDebounce);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let MessageRegistry = class MessageRegistry {

  constructor() {
    this.emitter = new _atom.Emitter();
    this.messages = [];
    this.messagesMap = new Set();
    this.subscriptions = new _atom.CompositeDisposable();
    this.debouncedUpdate = (0, _sbDebounce2.default)(this.update, 100, true);

    this.subscriptions.add(this.emitter);
  }
  set({ messages, linter, buffer }) {
    let found = null;
    for (const entry of this.messagesMap) {
      if (entry.buffer === buffer && entry.linter === linter) {
        found = entry;
        break;
      }
    }

    if (found) {
      found.messages = messages;
      found.changed = true;
    } else {
      this.messagesMap.add({ messages, linter, buffer, oldMessages: [], changed: true, deleted: false });
    }
    this.debouncedUpdate();
  }
  update() {
    const result = { added: [], removed: [], messages: [] };

    for (const entry of this.messagesMap) {
      if (entry.deleted) {
        result.removed = result.removed.concat(entry.oldMessages);
        this.messagesMap.delete(entry);
        continue;
      }
      if (!entry.changed) {
        result.messages = result.messages.concat(entry.oldMessages);
        continue;
      }
      entry.changed = false;
      if (!entry.oldMessages.length) {
        // All messages are new, no need to diff
        // NOTE: No need to add .key here because normalizeMessages already does that
        result.added = result.added.concat(entry.messages);
        result.messages = result.messages.concat(entry.messages);
        entry.oldMessages = entry.messages;
        continue;
      }
      if (!entry.messages.length) {
        // All messages are old, no need to diff
        result.removed = result.removed.concat(entry.oldMessages);
        entry.oldMessages = [];
        continue;
      }

      const newKeys = new Set();
      const oldKeys = new Set();
      const oldMessages = entry.oldMessages;
      let foundNew = false;
      entry.oldMessages = [];

      for (let i = 0, length = oldMessages.length; i < length; ++i) {
        const message = oldMessages[i];
        if (message.version === 2) {
          message.key = (0, _helpers.messageKey)(message);
        } else {
          message.key = (0, _helpers.messageKeyLegacy)(message);
        }
        oldKeys.add(message.key);
      }

      for (let i = 0, length = entry.messages.length; i < length; ++i) {
        const message = entry.messages[i];
        if (newKeys.has(message.key)) {
          continue;
        }
        newKeys.add(message.key);
        if (!oldKeys.has(message.key)) {
          foundNew = true;
          result.added.push(message);
          result.messages.push(message);
          entry.oldMessages.push(message);
        }
      }

      if (!foundNew && entry.messages.length === oldMessages.length) {
        // Messages are unchanged
        result.messages = result.messages.concat(oldMessages);
        entry.oldMessages = oldMessages;
        continue;
      }

      for (let i = 0, length = oldMessages.length; i < length; ++i) {
        const message = oldMessages[i];
        if (newKeys.has(message.key)) {
          entry.oldMessages.push(message);
          result.messages.push(message);
        } else {
          result.removed.push(message);
        }
      }
    }

    if (result.added.length || result.removed.length) {
      this.messages = result.messages;
      this.emitter.emit('did-update-messages', result);
    }
  }
  onDidUpdateMessages(callback) {
    return this.emitter.on('did-update-messages', callback);
  }
  deleteByBuffer(buffer) {
    for (const entry of this.messagesMap) {
      if (entry.buffer === buffer) {
        entry.deleted = true;
      }
    }
    this.debouncedUpdate();
  }
  deleteByLinter(linter) {
    for (const entry of this.messagesMap) {
      if (entry.linter === linter) {
        entry.deleted = true;
      }
    }
    this.debouncedUpdate();
  }
  dispose() {
    this.subscriptions.dispose();
  }
};
exports.default = MessageRegistry;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,