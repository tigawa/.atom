Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _atom = require('atom');

var _sbDebounce = require('sb-debounce');

var _sbDebounce2 = _interopRequireDefault(_sbDebounce);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let EditorLinter = class EditorLinter {

  constructor(editor) {
    if (!atom.workspace.isTextEditor(editor)) {
      throw new Error('EditorLinter expects a valid TextEditor');
    }

    this.editor = editor;
    this.emitter = new _atom.Emitter();
    this.subscriptions = new _atom.CompositeDisposable();

    this.subscriptions.add(this.editor.onDidDestroy(() => this.dispose()));
    this.subscriptions.add(this.editor.onDidSave((0, _sbDebounce2.default)(() => this.emitter.emit('should-lint', false)), 16, true));
    // NOTE: TextEditor::onDidChange immediately invokes the callback if the text editor was *just* created
    // Using TextBuffer::onDidChange doesn't have the same behavior so using it instead.
    this.subscriptions.add((0, _helpers.subscriptiveObserve)(atom.config, 'linter.lintOnChangeInterval', interval => this.editor.getBuffer().onDidChange((0, _sbDebounce2.default)(() => {
      this.emitter.emit('should-lint', true);
    }, interval))));
  }
  getEditor() {
    return this.editor;
  }
  lint(onChange = false) {
    this.emitter.emit('should-lint', onChange);
  }
  onShouldLint(callback) {
    return this.emitter.on('should-lint', callback);
  }
  onDidDestroy(callback) {
    return this.emitter.on('did-destroy', callback);
  }
  dispose() {
    this.emitter.emit('did-destroy');
    this.subscriptions.dispose();
    this.emitter.dispose();
  }
};
exports.default = EditorLinter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVkaXRvci1saW50ZXIuanMiXSwibmFtZXMiOlsiRWRpdG9yTGludGVyIiwiY29uc3RydWN0b3IiLCJlZGl0b3IiLCJhdG9tIiwid29ya3NwYWNlIiwiaXNUZXh0RWRpdG9yIiwiRXJyb3IiLCJlbWl0dGVyIiwic3Vic2NyaXB0aW9ucyIsImFkZCIsIm9uRGlkRGVzdHJveSIsImRpc3Bvc2UiLCJvbkRpZFNhdmUiLCJlbWl0IiwiY29uZmlnIiwiaW50ZXJ2YWwiLCJnZXRCdWZmZXIiLCJvbkRpZENoYW5nZSIsImdldEVkaXRvciIsImxpbnQiLCJvbkNoYW5nZSIsIm9uU2hvdWxkTGludCIsImNhbGxiYWNrIiwib24iXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUE7O0FBQ0E7Ozs7QUFFQTs7OztJQUVxQkEsWSxHQUFOLE1BQU1BLFlBQU4sQ0FBbUI7O0FBS2hDQyxjQUFZQyxNQUFaLEVBQWdDO0FBQzlCLFFBQUksQ0FBQ0MsS0FBS0MsU0FBTCxDQUFlQyxZQUFmLENBQTRCSCxNQUE1QixDQUFMLEVBQTBDO0FBQ3hDLFlBQU0sSUFBSUksS0FBSixDQUFVLHlDQUFWLENBQU47QUFDRDs7QUFFRCxTQUFLSixNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLSyxPQUFMLEdBQWUsbUJBQWY7QUFDQSxTQUFLQyxhQUFMLEdBQXFCLCtCQUFyQjs7QUFFQSxTQUFLQSxhQUFMLENBQW1CQyxHQUFuQixDQUF1QixLQUFLUCxNQUFMLENBQVlRLFlBQVosQ0FBeUIsTUFDOUMsS0FBS0MsT0FBTCxFQURxQixDQUF2QjtBQUdBLFNBQUtILGFBQUwsQ0FBbUJDLEdBQW5CLENBQXVCLEtBQUtQLE1BQUwsQ0FBWVUsU0FBWixDQUFzQiwwQkFBUyxNQUNwRCxLQUFLTCxPQUFMLENBQWFNLElBQWIsQ0FBa0IsYUFBbEIsRUFBaUMsS0FBakMsQ0FEMkMsQ0FBdEIsRUFFcEIsRUFGb0IsRUFFaEIsSUFGZ0IsQ0FBdkI7QUFHQTtBQUNBO0FBQ0EsU0FBS0wsYUFBTCxDQUFtQkMsR0FBbkIsQ0FBdUIsa0NBQW9CTixLQUFLVyxNQUF6QixFQUFpQyw2QkFBakMsRUFBZ0VDLFlBQ3JGLEtBQUtiLE1BQUwsQ0FBWWMsU0FBWixHQUF3QkMsV0FBeEIsQ0FBb0MsMEJBQVMsTUFBTTtBQUNqRCxXQUFLVixPQUFMLENBQWFNLElBQWIsQ0FBa0IsYUFBbEIsRUFBaUMsSUFBakM7QUFDRCxLQUZtQyxFQUVqQ0UsUUFGaUMsQ0FBcEMsQ0FEcUIsQ0FBdkI7QUFLRDtBQUNERyxjQUF3QjtBQUN0QixXQUFPLEtBQUtoQixNQUFaO0FBQ0Q7QUFDRGlCLE9BQUtDLFdBQW9CLEtBQXpCLEVBQWdDO0FBQzlCLFNBQUtiLE9BQUwsQ0FBYU0sSUFBYixDQUFrQixhQUFsQixFQUFpQ08sUUFBakM7QUFDRDtBQUNEQyxlQUFhQyxRQUFiLEVBQTZDO0FBQzNDLFdBQU8sS0FBS2YsT0FBTCxDQUFhZ0IsRUFBYixDQUFnQixhQUFoQixFQUErQkQsUUFBL0IsQ0FBUDtBQUNEO0FBQ0RaLGVBQWFZLFFBQWIsRUFBNkM7QUFDM0MsV0FBTyxLQUFLZixPQUFMLENBQWFnQixFQUFiLENBQWdCLGFBQWhCLEVBQStCRCxRQUEvQixDQUFQO0FBQ0Q7QUFDRFgsWUFBVTtBQUNSLFNBQUtKLE9BQUwsQ0FBYU0sSUFBYixDQUFrQixhQUFsQjtBQUNBLFNBQUtMLGFBQUwsQ0FBbUJHLE9BQW5CO0FBQ0EsU0FBS0osT0FBTCxDQUFhSSxPQUFiO0FBQ0Q7QUE1QytCLEM7a0JBQWJYLFkiLCJmaWxlIjoiZWRpdG9yLWxpbnRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCB7IEVtaXR0ZXIsIENvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGUgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJ3NiLWRlYm91bmNlJ1xuaW1wb3J0IHR5cGUgeyBUZXh0RWRpdG9yIH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IHN1YnNjcmlwdGl2ZU9ic2VydmUgfSBmcm9tICcuL2hlbHBlcnMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRvckxpbnRlciB7XG4gIGVkaXRvcjogVGV4dEVkaXRvcjtcbiAgZW1pdHRlcjogRW1pdHRlcjtcbiAgc3Vic2NyaXB0aW9uczogQ29tcG9zaXRlRGlzcG9zYWJsZTtcblxuICBjb25zdHJ1Y3RvcihlZGl0b3I6IFRleHRFZGl0b3IpIHtcbiAgICBpZiAoIWF0b20ud29ya3NwYWNlLmlzVGV4dEVkaXRvcihlZGl0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VkaXRvckxpbnRlciBleHBlY3RzIGEgdmFsaWQgVGV4dEVkaXRvcicpXG4gICAgfVxuXG4gICAgdGhpcy5lZGl0b3IgPSBlZGl0b3JcbiAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZCh0aGlzLmVkaXRvci5vbkRpZERlc3Ryb3koKCkgPT5cbiAgICAgIHRoaXMuZGlzcG9zZSgpXG4gICAgKSlcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKHRoaXMuZWRpdG9yLm9uRGlkU2F2ZShkZWJvdW5jZSgoKSA9PlxuICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ3Nob3VsZC1saW50JywgZmFsc2UpXG4gICAgKSwgMTYsIHRydWUpKVxuICAgIC8vIE5PVEU6IFRleHRFZGl0b3I6Om9uRGlkQ2hhbmdlIGltbWVkaWF0ZWx5IGludm9rZXMgdGhlIGNhbGxiYWNrIGlmIHRoZSB0ZXh0IGVkaXRvciB3YXMgKmp1c3QqIGNyZWF0ZWRcbiAgICAvLyBVc2luZyBUZXh0QnVmZmVyOjpvbkRpZENoYW5nZSBkb2Vzbid0IGhhdmUgdGhlIHNhbWUgYmVoYXZpb3Igc28gdXNpbmcgaXQgaW5zdGVhZC5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKHN1YnNjcmlwdGl2ZU9ic2VydmUoYXRvbS5jb25maWcsICdsaW50ZXIubGludE9uQ2hhbmdlSW50ZXJ2YWwnLCBpbnRlcnZhbCA9PlxuICAgICAgdGhpcy5lZGl0b3IuZ2V0QnVmZmVyKCkub25EaWRDaGFuZ2UoZGVib3VuY2UoKCkgPT4ge1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnc2hvdWxkLWxpbnQnLCB0cnVlKVxuICAgICAgfSwgaW50ZXJ2YWwpKVxuICAgICkpXG4gIH1cbiAgZ2V0RWRpdG9yKCk6IFRleHRFZGl0b3Ige1xuICAgIHJldHVybiB0aGlzLmVkaXRvclxuICB9XG4gIGxpbnQob25DaGFuZ2U6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdzaG91bGQtbGludCcsIG9uQ2hhbmdlKVxuICB9XG4gIG9uU2hvdWxkTGludChjYWxsYmFjazogRnVuY3Rpb24pOiBEaXNwb3NhYmxlIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdzaG91bGQtbGludCcsIGNhbGxiYWNrKVxuICB9XG4gIG9uRGlkRGVzdHJveShjYWxsYmFjazogRnVuY3Rpb24pOiBEaXNwb3NhYmxlIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtZGVzdHJveScsIGNhbGxiYWNrKVxuICB9XG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC1kZXN0cm95JylcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZGlzcG9zZSgpXG4gICAgdGhpcy5lbWl0dGVyLmRpc3Bvc2UoKVxuICB9XG59XG4iXX0=