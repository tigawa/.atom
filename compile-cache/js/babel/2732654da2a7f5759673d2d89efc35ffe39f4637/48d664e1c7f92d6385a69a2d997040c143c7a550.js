Object.defineProperty(exports, "__esModule", {
  value: true
});

var _atom = require('atom');

var _main = require('./main');

var _main2 = _interopRequireDefault(_main);

var _greeter = require('./greeter');

var _greeter2 = _interopRequireDefault(_greeter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let greeter;

let instance;

exports.default = {
  activate() {
    greeter = new _greeter2.default();

    const linterConfigs = atom.config.get('linter');
    // Unset v1 configs
    const removedV1Configs = ['lintOnFly', 'lintOnFlyInterval', 'ignoredMessageTypes', 'ignoreVCSIgnoredFiles', 'ignoreMatchedFiles', 'showErrorInline', 'inlineTooltipInterval', 'gutterEnabled', 'gutterPosition', 'underlineIssues', 'showProviderName', 'showErrorPanel', 'errorPanelHeight', 'alwaysTakeMinimumSpace', 'displayLinterInfo', 'displayLinterStatus', 'showErrorTabLine', 'showErrorTabFile', 'showErrorTabProject', 'statusIconScope', 'statusIconPosition'];
    if (removedV1Configs.some(config => ({}).hasOwnProperty.call(linterConfigs, config))) {
      greeter.showWelcome();
    }
    removedV1Configs.forEach(e => {
      atom.config.unset(`linter.${e}`);
    });

    if (!atom.inSpecMode()) {
      // eslint-disable-next-line global-require
      require('atom-package-deps').install('linter', true);
    }

    instance = new _main2.default();
  },
  consumeLinter(linter) {
    const linters = [].concat(linter);
    for (const entry of linters) {
      instance.addLinter(entry);
    }
    return new _atom.Disposable(() => {
      for (const entry of linters) {
        instance.deleteLinter(entry);
      }
    });
  },
  consumeLinterLegacy(linter) {
    const linters = [].concat(linter);
    for (const entry of linters) {
      linter.name = linter.name || 'Unknown';
      linter.lintOnFly = Boolean(linter.lintOnFly);
      instance.addLinter(entry, true);
    }
    return new _atom.Disposable(() => {
      for (const entry of linters) {
        instance.deleteLinter(entry);
      }
    });
  },
  consumeUI(ui) {
    const uis = [].concat(ui);
    for (const entry of uis) {
      instance.addUI(entry);
    }
    return new _atom.Disposable(() => {
      for (const entry of uis) {
        instance.deleteUI(entry);
      }
    });
  },
  provideIndie() {
    return indie => instance.registryIndie.register(indie, 2);
  },
  provideIndieLegacy() {
    return {
      register: indie => instance.registryIndie.register(indie, 1)
    };
  },
  deactivate() {
    instance.dispose();
    greeter.dispose();
  }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImdyZWV0ZXIiLCJpbnN0YW5jZSIsImFjdGl2YXRlIiwibGludGVyQ29uZmlncyIsImF0b20iLCJjb25maWciLCJnZXQiLCJyZW1vdmVkVjFDb25maWdzIiwic29tZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNob3dXZWxjb21lIiwiZm9yRWFjaCIsImUiLCJ1bnNldCIsImluU3BlY01vZGUiLCJyZXF1aXJlIiwiaW5zdGFsbCIsImNvbnN1bWVMaW50ZXIiLCJsaW50ZXIiLCJsaW50ZXJzIiwiY29uY2F0IiwiZW50cnkiLCJhZGRMaW50ZXIiLCJkZWxldGVMaW50ZXIiLCJjb25zdW1lTGludGVyTGVnYWN5IiwibmFtZSIsImxpbnRPbkZseSIsIkJvb2xlYW4iLCJjb25zdW1lVUkiLCJ1aSIsInVpcyIsImFkZFVJIiwiZGVsZXRlVUkiLCJwcm92aWRlSW5kaWUiLCJpbmRpZSIsInJlZ2lzdHJ5SW5kaWUiLCJyZWdpc3RlciIsInByb3ZpZGVJbmRpZUxlZ2FjeSIsImRlYWN0aXZhdGUiLCJkaXNwb3NlIl0sIm1hcHBpbmdzIjoiOzs7O0FBRUE7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBR0EsSUFBSUEsT0FBSjs7QUFDQSxJQUFJQyxRQUFKOztrQkFFZTtBQUNiQyxhQUFXO0FBQ1RGLGNBQVUsdUJBQVY7O0FBRUEsVUFBTUcsZ0JBQWdCQyxLQUFLQyxNQUFMLENBQVlDLEdBQVosQ0FBZ0IsUUFBaEIsQ0FBdEI7QUFDQTtBQUNBLFVBQU1DLG1CQUFtQixDQUN2QixXQUR1QixFQUV2QixtQkFGdUIsRUFHdkIscUJBSHVCLEVBSXZCLHVCQUp1QixFQUt2QixvQkFMdUIsRUFNdkIsaUJBTnVCLEVBT3ZCLHVCQVB1QixFQVF2QixlQVJ1QixFQVN2QixnQkFUdUIsRUFVdkIsaUJBVnVCLEVBV3ZCLGtCQVh1QixFQVl2QixnQkFadUIsRUFhdkIsa0JBYnVCLEVBY3ZCLHdCQWR1QixFQWV2QixtQkFmdUIsRUFnQnZCLHFCQWhCdUIsRUFpQnZCLGtCQWpCdUIsRUFrQnZCLGtCQWxCdUIsRUFtQnZCLHFCQW5CdUIsRUFvQnZCLGlCQXBCdUIsRUFxQnZCLG9CQXJCdUIsQ0FBekI7QUF1QkEsUUFBSUEsaUJBQWlCQyxJQUFqQixDQUFzQkgsVUFBVyxLQUFHSSxjQUFILENBQWtCQyxJQUFsQixDQUF1QlAsYUFBdkIsRUFBc0NFLE1BQXRDLENBQWpDLENBQUosRUFBc0Y7QUFDcEZMLGNBQVFXLFdBQVI7QUFDRDtBQUNESixxQkFBaUJLLE9BQWpCLENBQTBCQyxDQUFELElBQU87QUFBRVQsV0FBS0MsTUFBTCxDQUFZUyxLQUFaLENBQW1CLFVBQVNELENBQUUsRUFBOUI7QUFBa0MsS0FBcEU7O0FBRUEsUUFBSSxDQUFDVCxLQUFLVyxVQUFMLEVBQUwsRUFBd0I7QUFDdEI7QUFDQUMsY0FBUSxtQkFBUixFQUE2QkMsT0FBN0IsQ0FBcUMsUUFBckMsRUFBK0MsSUFBL0M7QUFDRDs7QUFFRGhCLGVBQVcsb0JBQVg7QUFDRCxHQXhDWTtBQXlDYmlCLGdCQUFjQyxNQUFkLEVBQWtEO0FBQ2hELFVBQU1DLFVBQVUsR0FBR0MsTUFBSCxDQUFVRixNQUFWLENBQWhCO0FBQ0EsU0FBSyxNQUFNRyxLQUFYLElBQW9CRixPQUFwQixFQUE2QjtBQUMzQm5CLGVBQVNzQixTQUFULENBQW1CRCxLQUFuQjtBQUNEO0FBQ0QsV0FBTyxxQkFBZSxNQUFNO0FBQzFCLFdBQUssTUFBTUEsS0FBWCxJQUFvQkYsT0FBcEIsRUFBNkI7QUFDM0JuQixpQkFBU3VCLFlBQVQsQ0FBc0JGLEtBQXRCO0FBQ0Q7QUFDRixLQUpNLENBQVA7QUFLRCxHQW5EWTtBQW9EYkcsc0JBQW9CTixNQUFwQixFQUF3RDtBQUN0RCxVQUFNQyxVQUFVLEdBQUdDLE1BQUgsQ0FBVUYsTUFBVixDQUFoQjtBQUNBLFNBQUssTUFBTUcsS0FBWCxJQUFvQkYsT0FBcEIsRUFBNkI7QUFDM0JELGFBQU9PLElBQVAsR0FBY1AsT0FBT08sSUFBUCxJQUFlLFNBQTdCO0FBQ0FQLGFBQU9RLFNBQVAsR0FBbUJDLFFBQVFULE9BQU9RLFNBQWYsQ0FBbkI7QUFDQTFCLGVBQVNzQixTQUFULENBQW1CRCxLQUFuQixFQUEwQixJQUExQjtBQUNEO0FBQ0QsV0FBTyxxQkFBZSxNQUFNO0FBQzFCLFdBQUssTUFBTUEsS0FBWCxJQUFvQkYsT0FBcEIsRUFBNkI7QUFDM0JuQixpQkFBU3VCLFlBQVQsQ0FBc0JGLEtBQXRCO0FBQ0Q7QUFDRixLQUpNLENBQVA7QUFLRCxHQWhFWTtBQWlFYk8sWUFBVUMsRUFBVixFQUE4QjtBQUM1QixVQUFNQyxNQUFNLEdBQUdWLE1BQUgsQ0FBVVMsRUFBVixDQUFaO0FBQ0EsU0FBSyxNQUFNUixLQUFYLElBQW9CUyxHQUFwQixFQUF5QjtBQUN2QjlCLGVBQVMrQixLQUFULENBQWVWLEtBQWY7QUFDRDtBQUNELFdBQU8scUJBQWUsTUFBTTtBQUMxQixXQUFLLE1BQU1BLEtBQVgsSUFBb0JTLEdBQXBCLEVBQXlCO0FBQ3ZCOUIsaUJBQVNnQyxRQUFULENBQWtCWCxLQUFsQjtBQUNEO0FBQ0YsS0FKTSxDQUFQO0FBS0QsR0EzRVk7QUE0RWJZLGlCQUF1QjtBQUNyQixXQUFPQyxTQUNMbEMsU0FBU21DLGFBQVQsQ0FBdUJDLFFBQXZCLENBQWdDRixLQUFoQyxFQUF1QyxDQUF2QyxDQURGO0FBRUQsR0EvRVk7QUFnRmJHLHVCQUE2QjtBQUMzQixXQUFPO0FBQ0xELGdCQUFVRixTQUFTbEMsU0FBU21DLGFBQVQsQ0FBdUJDLFFBQXZCLENBQWdDRixLQUFoQyxFQUF1QyxDQUF2QztBQURkLEtBQVA7QUFHRCxHQXBGWTtBQXFGYkksZUFBYTtBQUNYdEMsYUFBU3VDLE9BQVQ7QUFDQXhDLFlBQVF3QyxPQUFSO0FBQ0Q7QUF4RlksQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IExpbnRlciBmcm9tICcuL21haW4nXG5pbXBvcnQgR3JlZXRlciBmcm9tICcuL2dyZWV0ZXInXG5pbXBvcnQgdHlwZSB7IFVJLCBMaW50ZXIgYXMgTGludGVyUHJvdmlkZXIgfSBmcm9tICcuL3R5cGVzJ1xuXG5sZXQgZ3JlZXRlclxubGV0IGluc3RhbmNlXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYWN0aXZhdGUoKSB7XG4gICAgZ3JlZXRlciA9IG5ldyBHcmVldGVyKClcblxuICAgIGNvbnN0IGxpbnRlckNvbmZpZ3MgPSBhdG9tLmNvbmZpZy5nZXQoJ2xpbnRlcicpXG4gICAgLy8gVW5zZXQgdjEgY29uZmlnc1xuICAgIGNvbnN0IHJlbW92ZWRWMUNvbmZpZ3MgPSBbXG4gICAgICAnbGludE9uRmx5JyxcbiAgICAgICdsaW50T25GbHlJbnRlcnZhbCcsXG4gICAgICAnaWdub3JlZE1lc3NhZ2VUeXBlcycsXG4gICAgICAnaWdub3JlVkNTSWdub3JlZEZpbGVzJyxcbiAgICAgICdpZ25vcmVNYXRjaGVkRmlsZXMnLFxuICAgICAgJ3Nob3dFcnJvcklubGluZScsXG4gICAgICAnaW5saW5lVG9vbHRpcEludGVydmFsJyxcbiAgICAgICdndXR0ZXJFbmFibGVkJyxcbiAgICAgICdndXR0ZXJQb3NpdGlvbicsXG4gICAgICAndW5kZXJsaW5lSXNzdWVzJyxcbiAgICAgICdzaG93UHJvdmlkZXJOYW1lJyxcbiAgICAgICdzaG93RXJyb3JQYW5lbCcsXG4gICAgICAnZXJyb3JQYW5lbEhlaWdodCcsXG4gICAgICAnYWx3YXlzVGFrZU1pbmltdW1TcGFjZScsXG4gICAgICAnZGlzcGxheUxpbnRlckluZm8nLFxuICAgICAgJ2Rpc3BsYXlMaW50ZXJTdGF0dXMnLFxuICAgICAgJ3Nob3dFcnJvclRhYkxpbmUnLFxuICAgICAgJ3Nob3dFcnJvclRhYkZpbGUnLFxuICAgICAgJ3Nob3dFcnJvclRhYlByb2plY3QnLFxuICAgICAgJ3N0YXR1c0ljb25TY29wZScsXG4gICAgICAnc3RhdHVzSWNvblBvc2l0aW9uJyxcbiAgICBdXG4gICAgaWYgKHJlbW92ZWRWMUNvbmZpZ3Muc29tZShjb25maWcgPT4gKHt9Lmhhc093blByb3BlcnR5LmNhbGwobGludGVyQ29uZmlncywgY29uZmlnKSkpKSB7XG4gICAgICBncmVldGVyLnNob3dXZWxjb21lKClcbiAgICB9XG4gICAgcmVtb3ZlZFYxQ29uZmlncy5mb3JFYWNoKChlKSA9PiB7IGF0b20uY29uZmlnLnVuc2V0KGBsaW50ZXIuJHtlfWApIH0pXG5cbiAgICBpZiAoIWF0b20uaW5TcGVjTW9kZSgpKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmVcbiAgICAgIHJlcXVpcmUoJ2F0b20tcGFja2FnZS1kZXBzJykuaW5zdGFsbCgnbGludGVyJywgdHJ1ZSlcbiAgICB9XG5cbiAgICBpbnN0YW5jZSA9IG5ldyBMaW50ZXIoKVxuICB9LFxuICBjb25zdW1lTGludGVyKGxpbnRlcjogTGludGVyUHJvdmlkZXIpOiBEaXNwb3NhYmxlIHtcbiAgICBjb25zdCBsaW50ZXJzID0gW10uY29uY2F0KGxpbnRlcilcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGxpbnRlcnMpIHtcbiAgICAgIGluc3RhbmNlLmFkZExpbnRlcihlbnRyeSlcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEaXNwb3NhYmxlKCgpID0+IHtcbiAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgbGludGVycykge1xuICAgICAgICBpbnN0YW5jZS5kZWxldGVMaW50ZXIoZW50cnkpXG4gICAgICB9XG4gICAgfSlcbiAgfSxcbiAgY29uc3VtZUxpbnRlckxlZ2FjeShsaW50ZXI6IExpbnRlclByb3ZpZGVyKTogRGlzcG9zYWJsZSB7XG4gICAgY29uc3QgbGludGVycyA9IFtdLmNvbmNhdChsaW50ZXIpXG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBsaW50ZXJzKSB7XG4gICAgICBsaW50ZXIubmFtZSA9IGxpbnRlci5uYW1lIHx8ICdVbmtub3duJ1xuICAgICAgbGludGVyLmxpbnRPbkZseSA9IEJvb2xlYW4obGludGVyLmxpbnRPbkZseSlcbiAgICAgIGluc3RhbmNlLmFkZExpbnRlcihlbnRyeSwgdHJ1ZSlcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEaXNwb3NhYmxlKCgpID0+IHtcbiAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgbGludGVycykge1xuICAgICAgICBpbnN0YW5jZS5kZWxldGVMaW50ZXIoZW50cnkpXG4gICAgICB9XG4gICAgfSlcbiAgfSxcbiAgY29uc3VtZVVJKHVpOiBVSSk6IERpc3Bvc2FibGUge1xuICAgIGNvbnN0IHVpcyA9IFtdLmNvbmNhdCh1aSlcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHVpcykge1xuICAgICAgaW5zdGFuY2UuYWRkVUkoZW50cnkpXG4gICAgfVxuICAgIHJldHVybiBuZXcgRGlzcG9zYWJsZSgoKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHVpcykge1xuICAgICAgICBpbnN0YW5jZS5kZWxldGVVSShlbnRyeSlcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuICBwcm92aWRlSW5kaWUoKTogT2JqZWN0IHtcbiAgICByZXR1cm4gaW5kaWUgPT5cbiAgICAgIGluc3RhbmNlLnJlZ2lzdHJ5SW5kaWUucmVnaXN0ZXIoaW5kaWUsIDIpXG4gIH0sXG4gIHByb3ZpZGVJbmRpZUxlZ2FjeSgpOiBPYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICByZWdpc3RlcjogaW5kaWUgPT4gaW5zdGFuY2UucmVnaXN0cnlJbmRpZS5yZWdpc3RlcihpbmRpZSwgMSksXG4gICAgfVxuICB9LFxuICBkZWFjdGl2YXRlKCkge1xuICAgIGluc3RhbmNlLmRpc3Bvc2UoKVxuICAgIGdyZWV0ZXIuZGlzcG9zZSgpXG4gIH0sXG59XG4iXX0=