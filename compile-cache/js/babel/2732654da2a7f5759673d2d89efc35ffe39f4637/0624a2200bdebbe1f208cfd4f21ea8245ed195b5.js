Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _atom = require('atom');

var _validate = require('./validate');

var Validate = _interopRequireWildcard(_validate);

var _helpers = require('./helpers');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

let IndieDelegate = class IndieDelegate {

  constructor(indie, version) {
    this.indie = indie;
    this.scope = 'project';
    this.version = version;
    this.emitter = new _atom.Emitter();
    this.messages = new Map();
    this.subscriptions = new _atom.CompositeDisposable();

    this.subscriptions.add(this.emitter);
  }
  get name() {
    return this.indie.name;
  }
  getMessages() {
    return Array.from(this.messages.values()).reduce(function (toReturn, entry) {
      return toReturn.concat(entry);
    }, []);
  }
  deleteMessages() {
    if (this.version === 1) {
      this.clearMessages();
    } else {
      throw new Error('Call to depreciated method deleteMessages(). Use clearMessages() insead');
    }
  }
  clearMessages() {
    if (!this.subscriptions.disposed) {
      this.emitter.emit('did-update', []);
      this.messages.clear();
    }
  }
  setMessages(filePathOrMessages, messages = null) {
    // Legacy support area
    if (this.version === 1) {
      if (!Array.isArray(filePathOrMessages)) {
        throw new Error('Parameter 1 to setMessages() must be Array');
      }
      this.setAllMessages(filePathOrMessages);
      return;
    }

    // v2 Support from here on
    if (typeof filePathOrMessages !== 'string' || !Array.isArray(messages)) {
      throw new Error('Invalid Parameters to setMessages()');
    }
    const filePath = filePathOrMessages;
    if (this.subscriptions.disposed || !Validate.messages(this.name, messages)) {
      return;
    }
    messages.forEach(function (message) {
      if (message.location.file !== filePath) {
        console.debug('[Linter-UI-Default] Expected File', filePath, 'Message', message);
        throw new Error('message.location.file does not match the given filePath');
      }
    });

    (0, _helpers.normalizeMessages)(this.name, messages);
    this.messages.set(filePath, messages);
    this.emitter.emit('did-update', this.getMessages());
  }
  setAllMessages(messages) {
    if (this.subscriptions.disposed) {
      return;
    }

    if (this.version === 1) {
      if (!Validate.messagesLegacy(this.name, messages)) return;
      (0, _helpers.normalizeMessagesLegacy)(this.name, messages);
    } else {
      if (!Validate.messages(this.name, messages)) return;
      (0, _helpers.normalizeMessages)(this.name, messages);
    }

    this.messages.clear();
    for (let i = 0, length = messages.length; i < length; ++i) {
      const message = messages[i];
      const filePath = message.version === 1 ? message.filePath : message.location.file;
      let fileMessages = this.messages.get(filePath);
      if (!fileMessages) {
        this.messages.set(filePath, fileMessages = []);
      }
      fileMessages.push(message);
    }
    this.emitter.emit('did-update', this.getMessages());
  }
  onDidUpdate(callback) {
    return this.emitter.on('did-update', callback);
  }
  onDidDestroy(callback) {
    return this.emitter.on('did-destroy', callback);
  }
  dispose() {
    this.emitter.emit('did-destroy');
    this.subscriptions.dispose();
    this.messages.clear();
  }
};
exports.default = IndieDelegate;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,