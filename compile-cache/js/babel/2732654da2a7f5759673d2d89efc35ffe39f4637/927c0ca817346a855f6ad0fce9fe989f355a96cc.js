'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _eventKit = require('event-kit');

let AutoUpdateManager = class AutoUpdateManager {
  constructor({ applicationDelegate }) {
    this.applicationDelegate = applicationDelegate;
    this.subscriptions = new _eventKit.CompositeDisposable();
    this.emitter = new _eventKit.Emitter();

    this.subscriptions.add(applicationDelegate.onDidBeginCheckingForUpdate(() => {
      this.emitter.emit('did-begin-checking-for-update');
    }), applicationDelegate.onDidBeginDownloadingUpdate(() => {
      this.emitter.emit('did-begin-downloading-update');
    }), applicationDelegate.onDidCompleteDownloadingUpdate(details => {
      this.emitter.emit('did-complete-downloading-update', details);
    }), applicationDelegate.onUpdateNotAvailable(() => {
      this.emitter.emit('update-not-available');
    }), applicationDelegate.onUpdateError(() => {
      this.emitter.emit('update-error');
    }));
  }

  destroy() {
    this.subscriptions.dispose();
    this.emitter.dispose();
  }

  checkForUpdate() {
    this.applicationDelegate.checkForUpdate();
  }

  restartAndInstallUpdate() {
    this.applicationDelegate.restartAndInstallUpdate();
  }

  getState() {
    return this.applicationDelegate.getAutoUpdateManagerState();
  }

  getErrorMessage() {
    return this.applicationDelegate.getAutoUpdateManagerErrorMessage();
  }

  platformSupportsUpdates() {
    return atom.getReleaseChannel() !== 'dev' && this.getState() !== 'unsupported';
  }

  onDidBeginCheckingForUpdate(callback) {
    return this.emitter.on('did-begin-checking-for-update', callback);
  }

  onDidBeginDownloadingUpdate(callback) {
    return this.emitter.on('did-begin-downloading-update', callback);
  }

  onDidCompleteDownloadingUpdate(callback) {
    return this.emitter.on('did-complete-downloading-update', callback);
  }

  // TODO: When https://github.com/atom/electron/issues/4587 is closed, we can
  // add an update-available event.
  // onUpdateAvailable (callback) {
  //   return this.emitter.on('update-available', callback)
  // }

  onUpdateNotAvailable(callback) {
    return this.emitter.on('update-not-available', callback);
  }

  onUpdateError(callback) {
    return this.emitter.on('update-error', callback);
  }

  getPlatform() {
    return process.platform;
  }
};
exports.default = AutoUpdateManager;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dG8tdXBkYXRlLW1hbmFnZXIuanMiXSwibmFtZXMiOlsiQXV0b1VwZGF0ZU1hbmFnZXIiLCJjb25zdHJ1Y3RvciIsImFwcGxpY2F0aW9uRGVsZWdhdGUiLCJzdWJzY3JpcHRpb25zIiwiZW1pdHRlciIsImFkZCIsIm9uRGlkQmVnaW5DaGVja2luZ0ZvclVwZGF0ZSIsImVtaXQiLCJvbkRpZEJlZ2luRG93bmxvYWRpbmdVcGRhdGUiLCJvbkRpZENvbXBsZXRlRG93bmxvYWRpbmdVcGRhdGUiLCJkZXRhaWxzIiwib25VcGRhdGVOb3RBdmFpbGFibGUiLCJvblVwZGF0ZUVycm9yIiwiZGVzdHJveSIsImRpc3Bvc2UiLCJjaGVja0ZvclVwZGF0ZSIsInJlc3RhcnRBbmRJbnN0YWxsVXBkYXRlIiwiZ2V0U3RhdGUiLCJnZXRBdXRvVXBkYXRlTWFuYWdlclN0YXRlIiwiZ2V0RXJyb3JNZXNzYWdlIiwiZ2V0QXV0b1VwZGF0ZU1hbmFnZXJFcnJvck1lc3NhZ2UiLCJwbGF0Zm9ybVN1cHBvcnRzVXBkYXRlcyIsImF0b20iLCJnZXRSZWxlYXNlQ2hhbm5lbCIsImNhbGxiYWNrIiwib24iLCJnZXRQbGF0Zm9ybSIsInByb2Nlc3MiLCJwbGF0Zm9ybSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFFQTs7SSxBQUVxQixvQkFBTixNQUFBLEFBQU07Y0FDTixFQUFiLEFBQWEsQUFBQyx1QkFBc0IsQUFDbEM7U0FBQSxBQUFLLHNCQUFMLEFBQTJCLEFBQzNCO1NBQUEsQUFBSyxnQkFBZ0IsY0FBckIsQUFDQTtTQUFBLEFBQUssVUFBVSxjQUFmLEFBRUE7O1NBQUEsQUFBSyxjQUFMLEFBQW1CLHdCQUNqQixBQUFvQiw0QkFBNEIsTUFBTSxBQUNwRDtXQUFBLEFBQUssUUFBTCxBQUFhLEtBQWIsQUFBa0IsQUFDbkI7QUFISCxBQUNFLEtBQUEsdUJBR0EsQUFBb0IsNEJBQTRCLE1BQU0sQUFDcEQ7V0FBQSxBQUFLLFFBQUwsQUFBYSxLQUFiLEFBQWtCLEFBQ25CO0FBTkgsQUFJRSxLQUFBLHVCQUdBLEFBQW9CLCtCQUErQixBQUFDLFdBQVksQUFDOUQ7V0FBQSxBQUFLLFFBQUwsQUFBYSxLQUFiLEFBQWtCLG1DQUFsQixBQUFxRCxBQUN0RDtBQVRILEFBT0UsS0FBQSx1QkFHQSxBQUFvQixxQkFBcUIsTUFBTSxBQUM3QztXQUFBLEFBQUssUUFBTCxBQUFhLEtBQWIsQUFBa0IsQUFDbkI7QUFaSCxBQVVFLEtBQUEsdUJBR0EsQUFBb0IsY0FBYyxNQUFNLEFBQ3RDO1dBQUEsQUFBSyxRQUFMLEFBQWEsS0FBYixBQUFrQixBQUNuQjtBQWZILEFBYUUsQUFJSCxLQUpHO0FBTUo7O1lBQVcsQUFDVDtTQUFBLEFBQUssY0FBTCxBQUFtQixBQUNuQjtTQUFBLEFBQUssUUFBTCxBQUFhLEFBQ2Q7QUFFRDs7bUJBQWtCLEFBQ2hCO1NBQUEsQUFBSyxvQkFBTCxBQUF5QixBQUMxQjtBQUVEOzs0QkFBMkIsQUFDekI7U0FBQSxBQUFLLG9CQUFMLEFBQXlCLEFBQzFCO0FBRUQ7O2FBQVksQUFDVjtXQUFPLEtBQUEsQUFBSyxvQkFBWixBQUFPLEFBQXlCLEFBQ2pDO0FBRUQ7O29CQUFtQixBQUNqQjtXQUFPLEtBQUEsQUFBSyxvQkFBWixBQUFPLEFBQXlCLEFBQ2pDO0FBRUQ7OzRCQUEyQixBQUN6QjtXQUFPLEtBQUEsQUFBSyx3QkFBTCxBQUE2QixTQUFTLEtBQUEsQUFBSyxlQUFsRCxBQUFpRSxBQUNsRTtBQUVEOzs4QkFBQSxBQUE2QixVQUFVLEFBQ3JDO1dBQU8sS0FBQSxBQUFLLFFBQUwsQUFBYSxHQUFiLEFBQWdCLGlDQUF2QixBQUFPLEFBQWlELEFBQ3pEO0FBRUQ7OzhCQUFBLEFBQTZCLFVBQVUsQUFDckM7V0FBTyxLQUFBLEFBQUssUUFBTCxBQUFhLEdBQWIsQUFBZ0IsZ0NBQXZCLEFBQU8sQUFBZ0QsQUFDeEQ7QUFFRDs7aUNBQUEsQUFBZ0MsVUFBVSxBQUN4QztXQUFPLEtBQUEsQUFBSyxRQUFMLEFBQWEsR0FBYixBQUFnQixtQ0FBdkIsQUFBTyxBQUFtRCxBQUMzRDtBQUVEOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O3VCQUFBLEFBQXNCLFVBQVUsQUFDOUI7V0FBTyxLQUFBLEFBQUssUUFBTCxBQUFhLEdBQWIsQUFBZ0Isd0JBQXZCLEFBQU8sQUFBd0MsQUFDaEQ7QUFFRDs7Z0JBQUEsQUFBZSxVQUFVLEFBQ3ZCO1dBQU8sS0FBQSxBQUFLLFFBQUwsQUFBYSxHQUFiLEFBQWdCLGdCQUF2QixBQUFPLEFBQWdDLEFBQ3hDO0FBRUQ7O2dCQUFlLEFBQ2I7V0FBTyxRQUFQLEFBQWUsQUFDaEI7QUE5RW9DLEE7QUFBQSxBQUNyQztrQkFEbUIsQSIsImZpbGUiOiJhdXRvLXVwZGF0ZS1tYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCdcblxuaW1wb3J0IHtFbWl0dGVyLCBDb21wb3NpdGVEaXNwb3NhYmxlfSBmcm9tICdldmVudC1raXQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dG9VcGRhdGVNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IgKHthcHBsaWNhdGlvbkRlbGVnYXRlfSkge1xuICAgIHRoaXMuYXBwbGljYXRpb25EZWxlZ2F0ZSA9IGFwcGxpY2F0aW9uRGVsZWdhdGVcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKVxuXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZChcbiAgICAgIGFwcGxpY2F0aW9uRGVsZWdhdGUub25EaWRCZWdpbkNoZWNraW5nRm9yVXBkYXRlKCgpID0+IHtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC1iZWdpbi1jaGVja2luZy1mb3ItdXBkYXRlJylcbiAgICAgIH0pLFxuICAgICAgYXBwbGljYXRpb25EZWxlZ2F0ZS5vbkRpZEJlZ2luRG93bmxvYWRpbmdVcGRhdGUoKCkgPT4ge1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLWJlZ2luLWRvd25sb2FkaW5nLXVwZGF0ZScpXG4gICAgICB9KSxcbiAgICAgIGFwcGxpY2F0aW9uRGVsZWdhdGUub25EaWRDb21wbGV0ZURvd25sb2FkaW5nVXBkYXRlKChkZXRhaWxzKSA9PiB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtY29tcGxldGUtZG93bmxvYWRpbmctdXBkYXRlJywgZGV0YWlscylcbiAgICAgIH0pLFxuICAgICAgYXBwbGljYXRpb25EZWxlZ2F0ZS5vblVwZGF0ZU5vdEF2YWlsYWJsZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCd1cGRhdGUtbm90LWF2YWlsYWJsZScpXG4gICAgICB9KSxcbiAgICAgIGFwcGxpY2F0aW9uRGVsZWdhdGUub25VcGRhdGVFcnJvcigoKSA9PiB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCd1cGRhdGUtZXJyb3InKVxuICAgICAgfSlcbiAgICApXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZGlzcG9zZSgpXG4gICAgdGhpcy5lbWl0dGVyLmRpc3Bvc2UoKVxuICB9XG5cbiAgY2hlY2tGb3JVcGRhdGUgKCkge1xuICAgIHRoaXMuYXBwbGljYXRpb25EZWxlZ2F0ZS5jaGVja0ZvclVwZGF0ZSgpXG4gIH1cblxuICByZXN0YXJ0QW5kSW5zdGFsbFVwZGF0ZSAoKSB7XG4gICAgdGhpcy5hcHBsaWNhdGlvbkRlbGVnYXRlLnJlc3RhcnRBbmRJbnN0YWxsVXBkYXRlKClcbiAgfVxuXG4gIGdldFN0YXRlICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBsaWNhdGlvbkRlbGVnYXRlLmdldEF1dG9VcGRhdGVNYW5hZ2VyU3RhdGUoKVxuICB9XG5cbiAgZ2V0RXJyb3JNZXNzYWdlICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBsaWNhdGlvbkRlbGVnYXRlLmdldEF1dG9VcGRhdGVNYW5hZ2VyRXJyb3JNZXNzYWdlKClcbiAgfVxuXG4gIHBsYXRmb3JtU3VwcG9ydHNVcGRhdGVzICgpIHtcbiAgICByZXR1cm4gYXRvbS5nZXRSZWxlYXNlQ2hhbm5lbCgpICE9PSAnZGV2JyAmJiB0aGlzLmdldFN0YXRlKCkgIT09ICd1bnN1cHBvcnRlZCdcbiAgfVxuXG4gIG9uRGlkQmVnaW5DaGVja2luZ0ZvclVwZGF0ZSAoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtYmVnaW4tY2hlY2tpbmctZm9yLXVwZGF0ZScsIGNhbGxiYWNrKVxuICB9XG5cbiAgb25EaWRCZWdpbkRvd25sb2FkaW5nVXBkYXRlIChjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC1iZWdpbi1kb3dubG9hZGluZy11cGRhdGUnLCBjYWxsYmFjaylcbiAgfVxuXG4gIG9uRGlkQ29tcGxldGVEb3dubG9hZGluZ1VwZGF0ZSAoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtY29tcGxldGUtZG93bmxvYWRpbmctdXBkYXRlJywgY2FsbGJhY2spXG4gIH1cblxuICAvLyBUT0RPOiBXaGVuIGh0dHBzOi8vZ2l0aHViLmNvbS9hdG9tL2VsZWN0cm9uL2lzc3Vlcy80NTg3IGlzIGNsb3NlZCwgd2UgY2FuXG4gIC8vIGFkZCBhbiB1cGRhdGUtYXZhaWxhYmxlIGV2ZW50LlxuICAvLyBvblVwZGF0ZUF2YWlsYWJsZSAoY2FsbGJhY2spIHtcbiAgLy8gICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCd1cGRhdGUtYXZhaWxhYmxlJywgY2FsbGJhY2spXG4gIC8vIH1cblxuICBvblVwZGF0ZU5vdEF2YWlsYWJsZSAoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCd1cGRhdGUtbm90LWF2YWlsYWJsZScsIGNhbGxiYWNrKVxuICB9XG5cbiAgb25VcGRhdGVFcnJvciAoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCd1cGRhdGUtZXJyb3InLCBjYWxsYmFjaylcbiAgfVxuXG4gIGdldFBsYXRmb3JtICgpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5wbGF0Zm9ybVxuICB9XG59XG4iXX0=