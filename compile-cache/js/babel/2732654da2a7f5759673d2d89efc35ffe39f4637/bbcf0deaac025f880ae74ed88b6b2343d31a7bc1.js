Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBufferPositionFromMouseEvent = getBufferPositionFromMouseEvent;
exports.mouseEventNearPosition = mouseEventNearPosition;
exports.hasParent = hasParent;
function getBufferPositionFromMouseEvent(event, editor, editorElement) {
  const pixelPosition = editorElement.component.pixelPositionForMouseEvent(event);
  const screenPosition = editorElement.component.screenPositionForPixelPosition(pixelPosition);
  if (Number.isNaN(screenPosition.row) || Number.isNaN(screenPosition.column)) return null;
  // ^ Workaround for NaN bug steelbrain/linter-ui-default#191
  const expectedPixelPosition = editorElement.pixelPositionForScreenPosition(screenPosition);
  const differenceTop = pixelPosition.top - expectedPixelPosition.top;
  const differenceLeft = pixelPosition.left - expectedPixelPosition.left;
  // Only allow offset of 20px - Fixes steelbrain/linter-ui-default#63
  if ((differenceTop === 0 || differenceTop > 0 && differenceTop < 20 || differenceTop < 0 && differenceTop > -20) && (differenceLeft === 0 || differenceLeft > 0 && differenceLeft < 20 || differenceLeft < 0 && differenceLeft > -20)) {
    return editor.bufferPositionForScreenPosition(screenPosition);
  }
  return null;
}

function mouseEventNearPosition(event, editorElement, screenPosition, elementWidth, elementHeight) {
  const pixelPosition = editorElement.component.pixelPositionForMouseEvent(event);
  const expectedPixelPosition = editorElement.pixelPositionForScreenPosition(screenPosition);
  const differenceTop = pixelPosition.top - expectedPixelPosition.top;
  const differenceLeft = pixelPosition.left - expectedPixelPosition.left;
  if (differenceTop === 0 && differenceLeft === 0) {
    return true;
  }
  if (differenceTop > 0 && differenceTop > elementHeight + 20 || differenceTop < 0 && differenceTop < -5) {
    return false;
  }
  if (differenceLeft > 15 && differenceTop < 17) {
    return false;
  }
  return differenceLeft > 0 && differenceLeft < elementWidth + 20 || differenceLeft < 0 && differenceLeft > -5;
}

function hasParent(element, selector) {
  do {
    if (element.matches(selector)) {
      return true;
    }
    // $FlowIgnore: It's parent is an HTMLElement, not a NODE!
    element = element.parentNode;
  } while (element && element.nodeName !== 'HTML');
  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMuanMiXSwibmFtZXMiOlsiZ2V0QnVmZmVyUG9zaXRpb25Gcm9tTW91c2VFdmVudCIsIm1vdXNlRXZlbnROZWFyUG9zaXRpb24iLCJoYXNQYXJlbnQiLCJldmVudCIsImVkaXRvciIsImVkaXRvckVsZW1lbnQiLCJwaXhlbFBvc2l0aW9uIiwiY29tcG9uZW50IiwicGl4ZWxQb3NpdGlvbkZvck1vdXNlRXZlbnQiLCJzY3JlZW5Qb3NpdGlvbiIsInNjcmVlblBvc2l0aW9uRm9yUGl4ZWxQb3NpdGlvbiIsIk51bWJlciIsImlzTmFOIiwicm93IiwiY29sdW1uIiwiZXhwZWN0ZWRQaXhlbFBvc2l0aW9uIiwicGl4ZWxQb3NpdGlvbkZvclNjcmVlblBvc2l0aW9uIiwiZGlmZmVyZW5jZVRvcCIsInRvcCIsImRpZmZlcmVuY2VMZWZ0IiwibGVmdCIsImJ1ZmZlclBvc2l0aW9uRm9yU2NyZWVuUG9zaXRpb24iLCJlbGVtZW50V2lkdGgiLCJlbGVtZW50SGVpZ2h0IiwiZWxlbWVudCIsInNlbGVjdG9yIiwibWF0Y2hlcyIsInBhcmVudE5vZGUiLCJub2RlTmFtZSJdLCJtYXBwaW5ncyI6Ijs7O1FBSWdCQSwrQixHQUFBQSwrQjtRQWtCQUMsc0IsR0FBQUEsc0I7UUFpQkFDLFMsR0FBQUEsUztBQW5DVCxTQUFTRiwrQkFBVCxDQUF5Q0csS0FBekMsRUFBNERDLE1BQTVELEVBQWdGQyxhQUFoRixFQUErRztBQUNwSCxRQUFNQyxnQkFBZ0JELGNBQWNFLFNBQWQsQ0FBd0JDLDBCQUF4QixDQUFtREwsS0FBbkQsQ0FBdEI7QUFDQSxRQUFNTSxpQkFBaUJKLGNBQWNFLFNBQWQsQ0FBd0JHLDhCQUF4QixDQUF1REosYUFBdkQsQ0FBdkI7QUFDQSxNQUFJSyxPQUFPQyxLQUFQLENBQWFILGVBQWVJLEdBQTVCLEtBQW9DRixPQUFPQyxLQUFQLENBQWFILGVBQWVLLE1BQTVCLENBQXhDLEVBQTZFLE9BQU8sSUFBUDtBQUM3RTtBQUNBLFFBQU1DLHdCQUF3QlYsY0FBY1csOEJBQWQsQ0FBNkNQLGNBQTdDLENBQTlCO0FBQ0EsUUFBTVEsZ0JBQWdCWCxjQUFjWSxHQUFkLEdBQW9CSCxzQkFBc0JHLEdBQWhFO0FBQ0EsUUFBTUMsaUJBQWlCYixjQUFjYyxJQUFkLEdBQXFCTCxzQkFBc0JLLElBQWxFO0FBQ0E7QUFDQSxNQUNFLENBQUNILGtCQUFrQixDQUFsQixJQUF3QkEsZ0JBQWdCLENBQWhCLElBQXFCQSxnQkFBZ0IsRUFBN0QsSUFBcUVBLGdCQUFnQixDQUFoQixJQUFxQkEsZ0JBQWdCLENBQUMsRUFBNUcsTUFDQ0UsbUJBQW1CLENBQW5CLElBQXlCQSxpQkFBaUIsQ0FBakIsSUFBc0JBLGlCQUFpQixFQUFoRSxJQUF3RUEsaUJBQWlCLENBQWpCLElBQXNCQSxpQkFBaUIsQ0FBQyxFQURqSCxDQURGLEVBR0U7QUFDQSxXQUFPZixPQUFPaUIsK0JBQVAsQ0FBdUNaLGNBQXZDLENBQVA7QUFDRDtBQUNELFNBQU8sSUFBUDtBQUNEOztBQUVNLFNBQVNSLHNCQUFULENBQWdDRSxLQUFoQyxFQUFtREUsYUFBbkQsRUFBMEVJLGNBQTFFLEVBQWlHYSxZQUFqRyxFQUF1SEMsYUFBdkgsRUFBdUo7QUFDNUosUUFBTWpCLGdCQUFnQkQsY0FBY0UsU0FBZCxDQUF3QkMsMEJBQXhCLENBQW1ETCxLQUFuRCxDQUF0QjtBQUNBLFFBQU1ZLHdCQUF3QlYsY0FBY1csOEJBQWQsQ0FBNkNQLGNBQTdDLENBQTlCO0FBQ0EsUUFBTVEsZ0JBQWdCWCxjQUFjWSxHQUFkLEdBQW9CSCxzQkFBc0JHLEdBQWhFO0FBQ0EsUUFBTUMsaUJBQWlCYixjQUFjYyxJQUFkLEdBQXFCTCxzQkFBc0JLLElBQWxFO0FBQ0EsTUFBSUgsa0JBQWtCLENBQWxCLElBQXVCRSxtQkFBbUIsQ0FBOUMsRUFBaUQ7QUFDL0MsV0FBTyxJQUFQO0FBQ0Q7QUFDRCxNQUFLRixnQkFBZ0IsQ0FBaEIsSUFBcUJBLGdCQUFpQk0sZ0JBQWdCLEVBQXZELElBQWdFTixnQkFBZ0IsQ0FBaEIsSUFBcUJBLGdCQUFnQixDQUFDLENBQTFHLEVBQThHO0FBQzVHLFdBQU8sS0FBUDtBQUNEO0FBQ0QsTUFBSUUsaUJBQWlCLEVBQWpCLElBQXVCRixnQkFBZ0IsRUFBM0MsRUFBK0M7QUFDN0MsV0FBTyxLQUFQO0FBQ0Q7QUFDRCxTQUFRRSxpQkFBaUIsQ0FBakIsSUFBc0JBLGlCQUFrQkcsZUFBZSxFQUF4RCxJQUFpRUgsaUJBQWlCLENBQWpCLElBQXNCQSxpQkFBaUIsQ0FBQyxDQUFoSDtBQUNEOztBQUVNLFNBQVNqQixTQUFULENBQW1Cc0IsT0FBbkIsRUFBeUNDLFFBQXpDLEVBQW9FO0FBQ3pFLEtBQUc7QUFDRCxRQUFJRCxRQUFRRSxPQUFSLENBQWdCRCxRQUFoQixDQUFKLEVBQStCO0FBQzdCLGFBQU8sSUFBUDtBQUNEO0FBQ0Q7QUFDQUQsY0FBVUEsUUFBUUcsVUFBbEI7QUFDRCxHQU5ELFFBTVNILFdBQVdBLFFBQVFJLFFBQVIsS0FBcUIsTUFOekM7QUFPQSxTQUFPLEtBQVA7QUFDRCIsImZpbGUiOiJoZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IHR5cGUgeyBQb2ludCwgVGV4dEVkaXRvciB9IGZyb20gJ2F0b20nXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdWZmZXJQb3NpdGlvbkZyb21Nb3VzZUV2ZW50KGV2ZW50OiBNb3VzZUV2ZW50LCBlZGl0b3I6IFRleHRFZGl0b3IsIGVkaXRvckVsZW1lbnQ6IE9iamVjdCk6ID9Qb2ludCB7XG4gIGNvbnN0IHBpeGVsUG9zaXRpb24gPSBlZGl0b3JFbGVtZW50LmNvbXBvbmVudC5waXhlbFBvc2l0aW9uRm9yTW91c2VFdmVudChldmVudClcbiAgY29uc3Qgc2NyZWVuUG9zaXRpb24gPSBlZGl0b3JFbGVtZW50LmNvbXBvbmVudC5zY3JlZW5Qb3NpdGlvbkZvclBpeGVsUG9zaXRpb24ocGl4ZWxQb3NpdGlvbilcbiAgaWYgKE51bWJlci5pc05hTihzY3JlZW5Qb3NpdGlvbi5yb3cpIHx8IE51bWJlci5pc05hTihzY3JlZW5Qb3NpdGlvbi5jb2x1bW4pKSByZXR1cm4gbnVsbFxuICAvLyBeIFdvcmthcm91bmQgZm9yIE5hTiBidWcgc3RlZWxicmFpbi9saW50ZXItdWktZGVmYXVsdCMxOTFcbiAgY29uc3QgZXhwZWN0ZWRQaXhlbFBvc2l0aW9uID0gZWRpdG9yRWxlbWVudC5waXhlbFBvc2l0aW9uRm9yU2NyZWVuUG9zaXRpb24oc2NyZWVuUG9zaXRpb24pXG4gIGNvbnN0IGRpZmZlcmVuY2VUb3AgPSBwaXhlbFBvc2l0aW9uLnRvcCAtIGV4cGVjdGVkUGl4ZWxQb3NpdGlvbi50b3BcbiAgY29uc3QgZGlmZmVyZW5jZUxlZnQgPSBwaXhlbFBvc2l0aW9uLmxlZnQgLSBleHBlY3RlZFBpeGVsUG9zaXRpb24ubGVmdFxuICAvLyBPbmx5IGFsbG93IG9mZnNldCBvZiAyMHB4IC0gRml4ZXMgc3RlZWxicmFpbi9saW50ZXItdWktZGVmYXVsdCM2M1xuICBpZiAoXG4gICAgKGRpZmZlcmVuY2VUb3AgPT09IDAgfHwgKGRpZmZlcmVuY2VUb3AgPiAwICYmIGRpZmZlcmVuY2VUb3AgPCAyMCkgfHwgKGRpZmZlcmVuY2VUb3AgPCAwICYmIGRpZmZlcmVuY2VUb3AgPiAtMjApKSAmJlxuICAgIChkaWZmZXJlbmNlTGVmdCA9PT0gMCB8fCAoZGlmZmVyZW5jZUxlZnQgPiAwICYmIGRpZmZlcmVuY2VMZWZ0IDwgMjApIHx8IChkaWZmZXJlbmNlTGVmdCA8IDAgJiYgZGlmZmVyZW5jZUxlZnQgPiAtMjApKVxuICApIHtcbiAgICByZXR1cm4gZWRpdG9yLmJ1ZmZlclBvc2l0aW9uRm9yU2NyZWVuUG9zaXRpb24oc2NyZWVuUG9zaXRpb24pXG4gIH1cbiAgcmV0dXJuIG51bGxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdXNlRXZlbnROZWFyUG9zaXRpb24oZXZlbnQ6IE1vdXNlRXZlbnQsIGVkaXRvckVsZW1lbnQ6IE9iamVjdCwgc2NyZWVuUG9zaXRpb246IFBvaW50LCBlbGVtZW50V2lkdGg6IG51bWJlciwgZWxlbWVudEhlaWdodDogbnVtYmVyKTogYm9vbGVhbiB7XG4gIGNvbnN0IHBpeGVsUG9zaXRpb24gPSBlZGl0b3JFbGVtZW50LmNvbXBvbmVudC5waXhlbFBvc2l0aW9uRm9yTW91c2VFdmVudChldmVudClcbiAgY29uc3QgZXhwZWN0ZWRQaXhlbFBvc2l0aW9uID0gZWRpdG9yRWxlbWVudC5waXhlbFBvc2l0aW9uRm9yU2NyZWVuUG9zaXRpb24oc2NyZWVuUG9zaXRpb24pXG4gIGNvbnN0IGRpZmZlcmVuY2VUb3AgPSBwaXhlbFBvc2l0aW9uLnRvcCAtIGV4cGVjdGVkUGl4ZWxQb3NpdGlvbi50b3BcbiAgY29uc3QgZGlmZmVyZW5jZUxlZnQgPSBwaXhlbFBvc2l0aW9uLmxlZnQgLSBleHBlY3RlZFBpeGVsUG9zaXRpb24ubGVmdFxuICBpZiAoZGlmZmVyZW5jZVRvcCA9PT0gMCAmJiBkaWZmZXJlbmNlTGVmdCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKChkaWZmZXJlbmNlVG9wID4gMCAmJiBkaWZmZXJlbmNlVG9wID4gKGVsZW1lbnRIZWlnaHQgKyAyMCkpIHx8IChkaWZmZXJlbmNlVG9wIDwgMCAmJiBkaWZmZXJlbmNlVG9wIDwgLTUpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgaWYgKGRpZmZlcmVuY2VMZWZ0ID4gMTUgJiYgZGlmZmVyZW5jZVRvcCA8IDE3KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIChkaWZmZXJlbmNlTGVmdCA+IDAgJiYgZGlmZmVyZW5jZUxlZnQgPCAoZWxlbWVudFdpZHRoICsgMjApKSB8fCAoZGlmZmVyZW5jZUxlZnQgPCAwICYmIGRpZmZlcmVuY2VMZWZ0ID4gLTUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNQYXJlbnQoZWxlbWVudDogSFRNTEVsZW1lbnQsIHNlbGVjdG9yOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgZG8ge1xuICAgIGlmIChlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICAvLyAkRmxvd0lnbm9yZTogSXQncyBwYXJlbnQgaXMgYW4gSFRNTEVsZW1lbnQsIG5vdCBhIE5PREUhXG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZVxuICB9IHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQubm9kZU5hbWUgIT09ICdIVE1MJylcbiAgcmV0dXJuIGZhbHNlXG59XG4iXX0=