Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _sbEventKit = require('sb-event-kit');

let Element = class Element {

  constructor() {
    this.item = document.createElement('div');
    this.itemErrors = document.createElement('span');
    this.itemWarnings = document.createElement('span');
    this.itemInfos = document.createElement('span');

    this.emitter = new _sbEventKit.Emitter();
    this.subscriptions = new _sbEventKit.CompositeDisposable();

    this.item.appendChild(this.itemErrors);
    this.item.appendChild(this.itemWarnings);
    this.item.appendChild(this.itemInfos);
    this.item.classList.add('inline-block');
    this.item.classList.add('linter-status-count');

    this.subscriptions.add(this.emitter);
    this.subscriptions.add(atom.tooltips.add(this.itemErrors, { title: 'Linter Errors' }));
    this.subscriptions.add(atom.tooltips.add(this.itemWarnings, { title: 'Linter Warnings' }));
    this.subscriptions.add(atom.tooltips.add(this.itemInfos, { title: 'Linter Infos' }));

    this.itemErrors.onclick = () => this.emitter.emit('click', 'error');
    this.itemWarnings.onclick = () => this.emitter.emit('click', 'warning');
    this.itemInfos.onclick = () => this.emitter.emit('click', 'info');

    this.update(0, 0, 0);
  }
  setVisibility(prefix, visibility) {
    if (visibility) {
      this.item.classList.remove(`hide-${prefix}`);
    } else {
      this.item.classList.add(`hide-${prefix}`);
    }
  }
  update(countErrors, countWarnings, countInfos) {
    this.itemErrors.textContent = String(countErrors);
    this.itemWarnings.textContent = String(countWarnings);
    this.itemInfos.textContent = String(countInfos);

    if (countErrors) {
      this.itemErrors.classList.remove('highlight');
      this.itemErrors.classList.add('highlight-error');
    } else {
      this.itemErrors.classList.add('highlight');
      this.itemErrors.classList.remove('highlight-error');
    }

    if (countWarnings) {
      this.itemWarnings.classList.remove('highlight');
      this.itemWarnings.classList.add('highlight-warning');
    } else {
      this.itemWarnings.classList.add('highlight');
      this.itemWarnings.classList.remove('highlight-warning');
    }

    if (countInfos) {
      this.itemInfos.classList.remove('highlight');
      this.itemInfos.classList.add('highlight-info');
    } else {
      this.itemInfos.classList.add('highlight');
      this.itemInfos.classList.remove('highlight-info');
    }
  }
  onDidClick(callback) {
    return this.emitter.on('click', callback);
  }
  dispose() {
    this.subscriptions.dispose();
  }
};
exports.default = Element;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVsZW1lbnQuanMiXSwibmFtZXMiOlsiRWxlbWVudCIsImNvbnN0cnVjdG9yIiwiaXRlbSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIml0ZW1FcnJvcnMiLCJpdGVtV2FybmluZ3MiLCJpdGVtSW5mb3MiLCJlbWl0dGVyIiwic3Vic2NyaXB0aW9ucyIsImFwcGVuZENoaWxkIiwiY2xhc3NMaXN0IiwiYWRkIiwiYXRvbSIsInRvb2x0aXBzIiwidGl0bGUiLCJvbmNsaWNrIiwiZW1pdCIsInVwZGF0ZSIsInNldFZpc2liaWxpdHkiLCJwcmVmaXgiLCJ2aXNpYmlsaXR5IiwicmVtb3ZlIiwiY291bnRFcnJvcnMiLCJjb3VudFdhcm5pbmdzIiwiY291bnRJbmZvcyIsInRleHRDb250ZW50IiwiU3RyaW5nIiwib25EaWRDbGljayIsImNhbGxiYWNrIiwib24iLCJkaXNwb3NlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUVBOztJQUdxQkEsTyxHQUFOLE1BQU1BLE9BQU4sQ0FBYzs7QUFTM0JDLGdCQUFjO0FBQ1osU0FBS0MsSUFBTCxHQUFZQyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQVo7QUFDQSxTQUFLQyxVQUFMLEdBQWtCRixTQUFTQyxhQUFULENBQXVCLE1BQXZCLENBQWxCO0FBQ0EsU0FBS0UsWUFBTCxHQUFvQkgsU0FBU0MsYUFBVCxDQUF1QixNQUF2QixDQUFwQjtBQUNBLFNBQUtHLFNBQUwsR0FBaUJKLFNBQVNDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBakI7O0FBRUEsU0FBS0ksT0FBTCxHQUFlLHlCQUFmO0FBQ0EsU0FBS0MsYUFBTCxHQUFxQixxQ0FBckI7O0FBRUEsU0FBS1AsSUFBTCxDQUFVUSxXQUFWLENBQXNCLEtBQUtMLFVBQTNCO0FBQ0EsU0FBS0gsSUFBTCxDQUFVUSxXQUFWLENBQXNCLEtBQUtKLFlBQTNCO0FBQ0EsU0FBS0osSUFBTCxDQUFVUSxXQUFWLENBQXNCLEtBQUtILFNBQTNCO0FBQ0EsU0FBS0wsSUFBTCxDQUFVUyxTQUFW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QXpCLENBQWdDLFdBQWhDO0FBQ0EsV0FBS2YsU0FBTCxDQUFlSSxTQUFmLENBQXlCQyxHQUF6QixDQUE2QixnQkFBN0I7QUFDRCxLQUhELE1BR087QUFDTCxXQUFLTCxTQUFMLENBQWVJLFNBQWYsQ0FBeUJDLEdBQXpCLENBQTZCLFdBQTdCO0FBQ0EsV0FBS0wsU0FBTCxDQUFlSSxTQUFmLENBQXlCVyxNQUF6QixDQUFnQyxnQkFBaEM7QUFDRDtBQUNGO0FBQ0RNLGFBQVdDLFFBQVgsRUFBMkQ7QUFDekQsV0FBTyxLQUFLckIsT0FBTCxDQUFhc0IsRUFBYixDQUFnQixPQUFoQixFQUF5QkQsUUFBekIsQ0FBUDtBQUNEO0FBQ0RFLFlBQVU7QUFDUixTQUFLdEIsYUFBTCxDQUFtQnNCLE9BQW5CO0FBQ0Q7QUE1RTBCLEM7a0JBQVIvQixPIiwiZmlsZSI6ImVsZW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlLCBFbWl0dGVyIH0gZnJvbSAnc2ItZXZlbnQta2l0J1xuaW1wb3J0IHR5cGUgeyBEaXNwb3NhYmxlIH0gZnJvbSAnc2ItZXZlbnQta2l0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVtZW50IHtcbiAgaXRlbTogSFRNTEVsZW1lbnQ7XG4gIGl0ZW1FcnJvcnM6IEhUTUxFbGVtZW50O1xuICBpdGVtV2FybmluZ3M6IEhUTUxFbGVtZW50O1xuICBpdGVtSW5mb3M6IEhUTUxFbGVtZW50O1xuXG4gIGVtaXR0ZXI6IEVtaXR0ZXI7XG4gIHN1YnNjcmlwdGlvbnM6IENvbXBvc2l0ZURpc3Bvc2FibGU7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB0aGlzLml0ZW1FcnJvcnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJylcbiAgICB0aGlzLml0ZW1XYXJuaW5ncyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxuICAgIHRoaXMuaXRlbUluZm9zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG5cbiAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuXG4gICAgdGhpcy5pdGVtLmFwcGVuZENoaWxkKHRoaXMuaXRlbUVycm9ycylcbiAgICB0aGlzLml0ZW0uYXBwZW5kQ2hpbGQodGhpcy5pdGVtV2FybmluZ3MpXG4gICAgdGhpcy5pdGVtLmFwcGVuZENoaWxkKHRoaXMuaXRlbUluZm9zKVxuICAgIHRoaXMuaXRlbS5jbGFzc0xpc3QuYWRkKCdpbmxpbmUtYmxvY2snKVxuICAgIHRoaXMuaXRlbS5jbGFzc0xpc3QuYWRkKCdsaW50ZXItc3RhdHVzLWNvdW50JylcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQodGhpcy5lbWl0dGVyKVxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQoYXRvbS50b29sdGlwcy5hZGQodGhpcy5pdGVtRXJyb3JzLCB7IHRpdGxlOiAnTGludGVyIEVycm9ycycgfSkpXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZChhdG9tLnRvb2x0aXBzLmFkZCh0aGlzLml0ZW1XYXJuaW5ncywgeyB0aXRsZTogJ0xpbnRlciBXYXJuaW5ncycgfSkpXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZChhdG9tLnRvb2x0aXBzLmFkZCh0aGlzLml0ZW1JbmZvcywgeyB0aXRsZTogJ0xpbnRlciBJbmZvcycgfSkpXG5cbiAgICB0aGlzLml0ZW1FcnJvcnMub25jbGljayA9ICgpID0+IHRoaXMuZW1pdHRlci5lbWl0KCdjbGljaycsICdlcnJvcicpXG4gICAgdGhpcy5pdGVtV2FybmluZ3Mub25jbGljayA9ICgpID0+IHRoaXMuZW1pdHRlci5lbWl0KCdjbGljaycsICd3YXJuaW5nJylcbiAgICB0aGlzLml0ZW1JbmZvcy5vbmNsaWNrID0gKCkgPT4gdGhpcy5lbWl0dGVyLmVtaXQoJ2NsaWNrJywgJ2luZm8nKVxuXG4gICAgdGhpcy51cGRhdGUoMCwgMCwgMClcbiAgfVxuICBzZXRWaXNpYmlsaXR5KHByZWZpeDogc3RyaW5nLCB2aXNpYmlsaXR5OiBib29sZWFuKSB7XG4gICAgaWYgKHZpc2liaWxpdHkpIHtcbiAgICAgIHRoaXMuaXRlbS5jbGFzc0xpc3QucmVtb3ZlKGBoaWRlLSR7cHJlZml4fWApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXRlbS5jbGFzc0xpc3QuYWRkKGBoaWRlLSR7cHJlZml4fWApXG4gICAgfVxuICB9XG4gIHVwZGF0ZShjb3VudEVycm9yczogbnVtYmVyLCBjb3VudFdhcm5pbmdzOiBudW1iZXIsIGNvdW50SW5mb3M6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuaXRlbUVycm9ycy50ZXh0Q29udGVudCA9IFN0cmluZyhjb3VudEVycm9ycylcbiAgICB0aGlzLml0ZW1XYXJuaW5ncy50ZXh0Q29udGVudCA9IFN0cmluZyhjb3VudFdhcm5pbmdzKVxuICAgIHRoaXMuaXRlbUluZm9zLnRleHRDb250ZW50ID0gU3RyaW5nKGNvdW50SW5mb3MpXG5cbiAgICBpZiAoY291bnRFcnJvcnMpIHtcbiAgICAgIHRoaXMuaXRlbUVycm9ycy5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQnKVxuICAgICAgdGhpcy5pdGVtRXJyb3JzLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodC1lcnJvcicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXRlbUVycm9ycy5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQnKVxuICAgICAgdGhpcy5pdGVtRXJyb3JzLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodC1lcnJvcicpXG4gICAgfVxuXG4gICAgaWYgKGNvdW50V2FybmluZ3MpIHtcbiAgICAgIHRoaXMuaXRlbVdhcm5pbmdzLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpXG4gICAgICB0aGlzLml0ZW1XYXJuaW5ncy5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQtd2FybmluZycpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXRlbVdhcm5pbmdzLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodCcpXG4gICAgICB0aGlzLml0ZW1XYXJuaW5ncy5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQtd2FybmluZycpXG4gICAgfVxuXG4gICAgaWYgKGNvdW50SW5mb3MpIHtcbiAgICAgIHRoaXMuaXRlbUluZm9zLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpXG4gICAgICB0aGlzLml0ZW1JbmZvcy5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQtaW5mbycpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXRlbUluZm9zLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodCcpXG4gICAgICB0aGlzLml0ZW1JbmZvcy5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQtaW5mbycpXG4gICAgfVxuICB9XG4gIG9uRGlkQ2xpY2soY2FsbGJhY2s6ICgodHlwZTogc3RyaW5nKSA9PiB2b2lkKSk6IERpc3Bvc2FibGUge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2NsaWNrJywgY2FsbGJhY2spXG4gIH1cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZGlzcG9zZSgpXG4gIH1cbn1cbiJdfQ==