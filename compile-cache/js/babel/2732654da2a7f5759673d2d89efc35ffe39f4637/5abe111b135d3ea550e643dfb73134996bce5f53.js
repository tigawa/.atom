Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getChunks = getChunks;
exports.getChunksByProjects = getChunksByProjects;
exports.mergeChange = mergeChange;
exports.calculateDecorations = calculateDecorations;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getChunks(filePath, projectPath) {
  const toReturn = [];
  const chunks = filePath.split(_path2.default.sep);
  while (chunks.length) {
    const currentPath = chunks.join(_path2.default.sep);
    toReturn.push(currentPath);
    if (currentPath === projectPath) {
      break;
    }
    chunks.pop();
  }
  return toReturn;
}

function getChunksByProjects(filePath, projectPaths) {
  if (projectPaths.length < 3) {
    if (filePath.indexOf(projectPaths[0]) === 0) {
      return getChunks(filePath, projectPaths[0]);
    }
    if (filePath.indexOf(projectPaths[1]) === 0) {
      return getChunks(filePath, projectPaths[1]);
    }
    if (filePath.indexOf(projectPaths[2]) === 0) {
      return getChunks(filePath, projectPaths[2]);
    }
    return [filePath];
  }
  for (let i = 0, length = projectPaths.length; i < length; i++) {
    const projectPath = projectPaths[i];
    if (filePath.indexOf(projectPath) === 0) {
      return getChunks(filePath, projectPath);
    }
  }
  return [filePath];
}

function mergeChange(change, filePath, severity) {
  if (!change[filePath]) {
    change[filePath] = {
      info: false,
      error: false,
      warning: false
    };
  }
  change[filePath][severity] = true;
}

function calculateDecorations(decorateOnTreeView, messages) {
  const toReturn = {};
  const projectPaths = atom.project.getPaths();
  messages.forEach(function (message) {
    const filePath = (0, _helpers.$file)(message);
    if (filePath) {
      const chunks = decorateOnTreeView === 'Files' ? [filePath] : getChunksByProjects(filePath, projectPaths);
      chunks.forEach(chunk => mergeChange(toReturn, chunk, message.severity));
    }
  });
  return toReturn;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMuanMiXSwibmFtZXMiOlsiZ2V0Q2h1bmtzIiwiZ2V0Q2h1bmtzQnlQcm9qZWN0cyIsIm1lcmdlQ2hhbmdlIiwiY2FsY3VsYXRlRGVjb3JhdGlvbnMiLCJmaWxlUGF0aCIsInByb2plY3RQYXRoIiwidG9SZXR1cm4iLCJjaHVua3MiLCJzcGxpdCIsInNlcCIsImxlbmd0aCIsImN1cnJlbnRQYXRoIiwiam9pbiIsInB1c2giLCJwb3AiLCJwcm9qZWN0UGF0aHMiLCJpbmRleE9mIiwiaSIsImNoYW5nZSIsInNldmVyaXR5IiwiaW5mbyIsImVycm9yIiwid2FybmluZyIsImRlY29yYXRlT25UcmVlVmlldyIsIm1lc3NhZ2VzIiwiYXRvbSIsInByb2plY3QiLCJnZXRQYXRocyIsImZvckVhY2giLCJtZXNzYWdlIiwiY2h1bmsiXSwibWFwcGluZ3MiOiI7OztRQU1nQkEsUyxHQUFBQSxTO1FBY0FDLG1CLEdBQUFBLG1CO1FBc0JBQyxXLEdBQUFBLFc7UUFXQUMsb0IsR0FBQUEsb0I7O0FBbkRoQjs7OztBQUNBOzs7O0FBR08sU0FBU0gsU0FBVCxDQUFtQkksUUFBbkIsRUFBcUNDLFdBQXJDLEVBQXlFO0FBQzlFLFFBQU1DLFdBQVcsRUFBakI7QUFDQSxRQUFNQyxTQUFTSCxTQUFTSSxLQUFULENBQWUsZUFBS0MsR0FBcEIsQ0FBZjtBQUNBLFNBQU9GLE9BQU9HLE1BQWQsRUFBc0I7QUFDcEIsVUFBTUMsY0FBY0osT0FBT0ssSUFBUCxDQUFZLGVBQUtILEdBQWpCLENBQXBCO0FBQ0FILGFBQVNPLElBQVQsQ0FBY0YsV0FBZDtBQUNBLFFBQUlBLGdCQUFnQk4sV0FBcEIsRUFBaUM7QUFDL0I7QUFDRDtBQUNERSxXQUFPTyxHQUFQO0FBQ0Q7QUFDRCxTQUFPUixRQUFQO0FBQ0Q7O0FBRU0sU0FBU0wsbUJBQVQsQ0FBNkJHLFFBQTdCLEVBQStDVyxZQUEvQyxFQUEyRjtBQUNoRyxNQUFJQSxhQUFhTCxNQUFiLEdBQXNCLENBQTFCLEVBQTZCO0FBQzNCLFFBQUlOLFNBQVNZLE9BQVQsQ0FBaUJELGFBQWEsQ0FBYixDQUFqQixNQUFzQyxDQUExQyxFQUE2QztBQUMzQyxhQUFPZixVQUFVSSxRQUFWLEVBQW9CVyxhQUFhLENBQWIsQ0FBcEIsQ0FBUDtBQUNEO0FBQ0QsUUFBSVgsU0FBU1ksT0FBVCxDQUFpQkQsYUFBYSxDQUFiLENBQWpCLE1BQXNDLENBQTFDLEVBQTZDO0FBQzNDLGFBQU9mLFVBQVVJLFFBQVYsRUFBb0JXLGFBQWEsQ0FBYixDQUFwQixDQUFQO0FBQ0Q7QUFDRCxRQUFJWCxTQUFTWSxPQUFULENBQWlCRCxhQUFhLENBQWIsQ0FBakIsTUFBc0MsQ0FBMUMsRUFBNkM7QUFDM0MsYUFBT2YsVUFBVUksUUFBVixFQUFvQlcsYUFBYSxDQUFiLENBQXBCLENBQVA7QUFDRDtBQUNELFdBQU8sQ0FBQ1gsUUFBRCxDQUFQO0FBQ0Q7QUFDRCxPQUFLLElBQUlhLElBQUksQ0FBUixFQUFXUCxTQUFTSyxhQUFhTCxNQUF0QyxFQUE4Q08sSUFBSVAsTUFBbEQsRUFBMERPLEdBQTFELEVBQStEO0FBQzdELFVBQU1aLGNBQWNVLGFBQWFFLENBQWIsQ0FBcEI7QUFDQSxRQUFJYixTQUFTWSxPQUFULENBQWlCWCxXQUFqQixNQUFrQyxDQUF0QyxFQUF5QztBQUN2QyxhQUFPTCxVQUFVSSxRQUFWLEVBQW9CQyxXQUFwQixDQUFQO0FBQ0Q7QUFDRjtBQUNELFNBQU8sQ0FBQ0QsUUFBRCxDQUFQO0FBQ0Q7O0FBRU0sU0FBU0YsV0FBVCxDQUFxQmdCLE1BQXJCLEVBQXFDZCxRQUFyQyxFQUF1RGUsUUFBdkQsRUFBK0U7QUFDcEYsTUFBSSxDQUFDRCxPQUFPZCxRQUFQLENBQUwsRUFBdUI7QUFDckJjLFdBQU9kLFFBQVAsSUFBbUI7QUFDakJnQixZQUFNLEtBRFc7QUFFakJDLGFBQU8sS0FGVTtBQUdqQkMsZUFBUztBQUhRLEtBQW5CO0FBS0Q7QUFDREosU0FBT2QsUUFBUCxFQUFpQmUsUUFBakIsSUFBNkIsSUFBN0I7QUFDRDs7QUFFTSxTQUFTaEIsb0JBQVQsQ0FBOEJvQixrQkFBOUIsRUFBcUZDLFFBQXJGLEVBQTZIO0FBQ2xJLFFBQU1sQixXQUFXLEVBQWpCO0FBQ0EsUUFBTVMsZUFBOEJVLEtBQUtDLE9BQUwsQ0FBYUMsUUFBYixFQUFwQztBQUNBSCxXQUFTSSxPQUFULENBQWlCLFVBQVNDLE9BQVQsRUFBa0I7QUFDakMsVUFBTXpCLFdBQVcsb0JBQU15QixPQUFOLENBQWpCO0FBQ0EsUUFBSXpCLFFBQUosRUFBYztBQUNaLFlBQU1HLFNBQVNnQix1QkFBdUIsT0FBdkIsR0FBaUMsQ0FBQ25CLFFBQUQsQ0FBakMsR0FBOENILG9CQUFvQkcsUUFBcEIsRUFBOEJXLFlBQTlCLENBQTdEO0FBQ0FSLGFBQU9xQixPQUFQLENBQWVFLFNBQVM1QixZQUFZSSxRQUFaLEVBQXNCd0IsS0FBdEIsRUFBNkJELFFBQVFWLFFBQXJDLENBQXhCO0FBQ0Q7QUFDRixHQU5EO0FBT0EsU0FBT2IsUUFBUDtBQUNEIiwiZmlsZSI6ImhlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgUGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgJGZpbGUgfSBmcm9tICcuLi9oZWxwZXJzJ1xuaW1wb3J0IHR5cGUgeyBMaW50ZXJNZXNzYWdlIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaHVua3MoZmlsZVBhdGg6IHN0cmluZywgcHJvamVjdFBhdGg6IHN0cmluZyk6IEFycmF5PHN0cmluZz4ge1xuICBjb25zdCB0b1JldHVybiA9IFtdXG4gIGNvbnN0IGNodW5rcyA9IGZpbGVQYXRoLnNwbGl0KFBhdGguc2VwKVxuICB3aGlsZSAoY2h1bmtzLmxlbmd0aCkge1xuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gY2h1bmtzLmpvaW4oUGF0aC5zZXApXG4gICAgdG9SZXR1cm4ucHVzaChjdXJyZW50UGF0aClcbiAgICBpZiAoY3VycmVudFBhdGggPT09IHByb2plY3RQYXRoKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjaHVua3MucG9wKClcbiAgfVxuICByZXR1cm4gdG9SZXR1cm5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENodW5rc0J5UHJvamVjdHMoZmlsZVBhdGg6IHN0cmluZywgcHJvamVjdFBhdGhzOiBBcnJheTxzdHJpbmc+KTogQXJyYXk8c3RyaW5nPiB7XG4gIGlmIChwcm9qZWN0UGF0aHMubGVuZ3RoIDwgMykge1xuICAgIGlmIChmaWxlUGF0aC5pbmRleE9mKHByb2plY3RQYXRoc1swXSkgPT09IDApIHtcbiAgICAgIHJldHVybiBnZXRDaHVua3MoZmlsZVBhdGgsIHByb2plY3RQYXRoc1swXSlcbiAgICB9XG4gICAgaWYgKGZpbGVQYXRoLmluZGV4T2YocHJvamVjdFBhdGhzWzFdKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGdldENodW5rcyhmaWxlUGF0aCwgcHJvamVjdFBhdGhzWzFdKVxuICAgIH1cbiAgICBpZiAoZmlsZVBhdGguaW5kZXhPZihwcm9qZWN0UGF0aHNbMl0pID09PSAwKSB7XG4gICAgICByZXR1cm4gZ2V0Q2h1bmtzKGZpbGVQYXRoLCBwcm9qZWN0UGF0aHNbMl0pXG4gICAgfVxuICAgIHJldHVybiBbZmlsZVBhdGhdXG4gIH1cbiAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHByb2plY3RQYXRocy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByb2plY3RQYXRoID0gcHJvamVjdFBhdGhzW2ldXG4gICAgaWYgKGZpbGVQYXRoLmluZGV4T2YocHJvamVjdFBhdGgpID09PSAwKSB7XG4gICAgICByZXR1cm4gZ2V0Q2h1bmtzKGZpbGVQYXRoLCBwcm9qZWN0UGF0aClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtmaWxlUGF0aF1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ2hhbmdlKGNoYW5nZTogT2JqZWN0LCBmaWxlUGF0aDogc3RyaW5nLCBzZXZlcml0eTogc3RyaW5nKTogdm9pZCB7XG4gIGlmICghY2hhbmdlW2ZpbGVQYXRoXSkge1xuICAgIGNoYW5nZVtmaWxlUGF0aF0gPSB7XG4gICAgICBpbmZvOiBmYWxzZSxcbiAgICAgIGVycm9yOiBmYWxzZSxcbiAgICAgIHdhcm5pbmc6IGZhbHNlLFxuICAgIH1cbiAgfVxuICBjaGFuZ2VbZmlsZVBhdGhdW3NldmVyaXR5XSA9IHRydWVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZURlY29yYXRpb25zKGRlY29yYXRlT25UcmVlVmlldzogJ0ZpbGVzIGFuZCBEaXJlY3RvcmllcycgfCAnRmlsZXMnLCBtZXNzYWdlczogQXJyYXk8TGludGVyTWVzc2FnZT4pOiBPYmplY3Qge1xuICBjb25zdCB0b1JldHVybiA9IHt9XG4gIGNvbnN0IHByb2plY3RQYXRoczogQXJyYXk8c3RyaW5nPiA9IGF0b20ucHJvamVjdC5nZXRQYXRocygpXG4gIG1lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24obWVzc2FnZSkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gJGZpbGUobWVzc2FnZSlcbiAgICBpZiAoZmlsZVBhdGgpIHtcbiAgICAgIGNvbnN0IGNodW5rcyA9IGRlY29yYXRlT25UcmVlVmlldyA9PT0gJ0ZpbGVzJyA/IFtmaWxlUGF0aF0gOiBnZXRDaHVua3NCeVByb2plY3RzKGZpbGVQYXRoLCBwcm9qZWN0UGF0aHMpXG4gICAgICBjaHVua3MuZm9yRWFjaChjaHVuayA9PiBtZXJnZUNoYW5nZSh0b1JldHVybiwgY2h1bmssIG1lc3NhZ2Uuc2V2ZXJpdHkpKVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIHRvUmV0dXJuXG59XG4iXX0=