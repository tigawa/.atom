Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LINTER_CONFIG_FILE_OPTIONS = exports.LINTER_CONFIG_FILE_DEFAULT = exports.LINTER_CONFIG_FILE_PATH = exports.$requestLastReceived = exports.$requestLatest = exports.$activated = exports.$version = undefined;
exports.getConfigFile = getConfigFile;
exports.shouldTriggerLinter = shouldTriggerLinter;
exports.getEditorCursorScopes = getEditorCursorScopes;
exports.isPathIgnored = isPathIgnored;
exports.subscriptiveObserve = subscriptiveObserve;
exports.messageKey = messageKey;
exports.normalizeMessages = normalizeMessages;
exports.messageKeyLegacy = messageKeyLegacy;
exports.normalizeMessagesLegacy = normalizeMessagesLegacy;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _minimatch = require('minimatch');

var _minimatch2 = _interopRequireDefault(_minimatch);

var _lodash = require('lodash.uniq');

var _lodash2 = _interopRequireDefault(_lodash);

var _sbConfigFile = require('sb-config-file');

var _sbConfigFile2 = _interopRequireDefault(_sbConfigFile);

var _atom = require('atom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const $version = exports.$version = '__$sb_linter_version';

const $activated = exports.$activated = '__$sb_linter_activated';
const $requestLatest = exports.$requestLatest = '__$sb_linter_request_latest';
const $requestLastReceived = exports.$requestLastReceived = '__$sb_linter_request_last_received';

const LINTER_CONFIG_FILE_PATH = exports.LINTER_CONFIG_FILE_PATH = _path2.default.join(atom.getConfigDirPath(), 'linter-config.json');
const LINTER_CONFIG_FILE_DEFAULT = exports.LINTER_CONFIG_FILE_DEFAULT = {
  disabled: [],
  greeter: {
    shown: []
  }
};
const LINTER_CONFIG_FILE_OPTIONS = exports.LINTER_CONFIG_FILE_OPTIONS = {
  prettyPrint: true,
  createIfNonExistent: false
};
function getConfigFile() {
  return _sbConfigFile2.default.get(LINTER_CONFIG_FILE_PATH, LINTER_CONFIG_FILE_DEFAULT, LINTER_CONFIG_FILE_OPTIONS);
}

function shouldTriggerLinter(linter, wasTriggeredOnChange, scopes) {
  if (wasTriggeredOnChange && !(linter[$version] === 2 ? linter.lintsOnChange : linter.lintOnFly)) {
    return false;
  }
  return scopes.some(function (scope) {
    return linter.grammarScopes.includes(scope);
  });
}

function getEditorCursorScopes(textEditor) {
  return (0, _lodash2.default)(textEditor.getCursors().reduce((scopes, cursor) => scopes.concat(cursor.getScopeDescriptor().getScopesArray()), ['*']));
}

function isPathIgnored(filePath, ignoredGlob, ignoredVCS) {
  if (ignoredVCS) {
    let repository = null;
    const projectPaths = atom.project.getPaths();
    for (let i = 0, length = projectPaths.length; i < length; ++i) {
      const projectPath = projectPaths[i];
      if (filePath.indexOf(projectPath) === 0) {
        repository = atom.project.getRepositories()[i];
        break;
      }
    }
    if (repository && repository.isPathIgnored(filePath)) {
      return true;
    }
  }
  const normalizedFilePath = process.platform === 'win32' ? filePath.replace(/\\/g, '/') : filePath;
  return (0, _minimatch2.default)(normalizedFilePath, ignoredGlob);
}

function subscriptiveObserve(object, eventName, callback) {
  let subscription = null;
  const eventSubscription = object.observe(eventName, function (props) {
    if (subscription) {
      subscription.dispose();
    }
    subscription = callback.call(this, props);
  });

  return new _atom.Disposable(function () {
    eventSubscription.dispose();
    if (subscription) {
      subscription.dispose();
    }
  });
}

function messageKey(message) {
  const reference = message.reference;
  return [`$LINTER:${message.linterName}`, `$LOCATION:${message.location.file}$${message.location.position.start.row}$${message.location.position.start.column}$${message.location.position.end.row}$${message.location.position.end.column}`, reference ? `$REFERENCE:${reference.file}$${reference.position ? `${reference.position.row}$${reference.position.column}` : ''}` : '$REFERENCE:null', `$EXCERPT:${message.excerpt}`, `$SEVERITY:${message.severity}`, message.icon ? `$ICON:${message.icon}` : '$ICON:null', message.url ? `$URL:${message.url}` : '$URL:null'].join('');
}

function normalizeMessages(linterName, messages) {
  for (let i = 0, length = messages.length; i < length; ++i) {
    const message = messages[i];
    const reference = message.reference;
    if (Array.isArray(message.location.position)) {
      message.location.position = _atom.Range.fromObject(message.location.position);
    }
    if (reference && Array.isArray(reference.position)) {
      reference.position = _atom.Point.fromObject(reference.position);
    }
    if (message.solutions && message.solutions.length) {
      for (let j = 0, _length = message.solutions.length, solution; j < _length; j++) {
        solution = message.solutions[j];
        if (Array.isArray(solution.position)) {
          solution.position = _atom.Range.fromObject(solution.position);
        }
      }
    }
    message.version = 2;
    message.linterName = linterName;
    message.key = messageKey(message);
  }
}

function messageKeyLegacy(message) {
  return [`$LINTER:${message.linterName}`, `$LOCATION:${message.filePath || ''}$${message.range ? `${message.range.start.row}$${message.range.start.column}$${message.range.end.row}$${message.range.end.column}` : ''}`, `$TEXT:${message.text || ''}`, `$HTML:${message.html || ''}`, `$SEVERITY:${message.severity}`, `$TYPE:${message.type}`, `$CLASS:${message.class || ''}`].join('');
}

function normalizeMessagesLegacy(linterName, messages) {
  for (let i = 0, length = messages.length; i < length; ++i) {
    const message = messages[i];
    const fix = message.fix;
    if (message.range && message.range.constructor.name === 'Array') {
      message.range = _atom.Range.fromObject(message.range);
    }
    if (fix && fix.range.constructor.name === 'Array') {
      fix.range = _atom.Range.fromObject(fix.range);
    }
    if (!message.severity) {
      const type = message.type.toLowerCase();
      if (type === 'warning') {
        message.severity = type;
      } else if (type === 'info' || type === 'trace') {
        message.severity = 'info';
      } else {
        message.severity = 'error';
      }
    }
    message.version = 1;
    message.linterName = linterName;
    message.key = messageKeyLegacy(message);

    if (message.trace) {
      normalizeMessagesLegacy(linterName, message.trace);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,