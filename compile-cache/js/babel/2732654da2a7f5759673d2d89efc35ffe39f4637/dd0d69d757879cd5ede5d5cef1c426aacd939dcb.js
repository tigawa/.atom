Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _sbEventKit = require('sb-event-kit');

var _sbDebounce = require('sb-debounce');

var _sbDebounce2 = _interopRequireDefault(_sbDebounce);

var _disposableEvent = require('disposable-event');

var _disposableEvent2 = _interopRequireDefault(_disposableEvent);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let TreeView = class TreeView {

  constructor() {
    this.emitter = new _sbEventKit.Emitter();
    this.messages = [];
    this.decorations = {};
    this.subscriptions = new _sbEventKit.CompositeDisposable();

    this.subscriptions.add(this.emitter);
    this.subscriptions.add(atom.config.observe('linter-ui-default.decorateOnTreeView', decorateOnTreeView => {
      if (typeof this.decorateOnTreeView === 'undefined') {
        this.decorateOnTreeView = decorateOnTreeView;
      } else if (decorateOnTreeView === 'None') {
        this.update([]);
        this.decorateOnTreeView = decorateOnTreeView;
      } else {
        const messages = this.messages;
        this.decorateOnTreeView = decorateOnTreeView;
        this.update(messages);
      }
    }));

    setTimeout(() => {
      const element = TreeView.getElement();
      if (this.subscriptions.disposed || !element) {
        return;
      }
      this.subscriptions.add((0, _disposableEvent2.default)(element, 'click', (0, _sbDebounce2.default)(() => {
        this.update();
      })));
    }, 100);
  }
  update(givenMessages = null) {
    let messages;
    if (Array.isArray(givenMessages)) {
      messages = this.messages = givenMessages;
    } else {
      messages = this.messages;
    }

    const element = TreeView.getElement();
    const decorateOnTreeView = this.decorateOnTreeView;
    if (!element || decorateOnTreeView === 'None') {
      return;
    }

    this.applyDecorations((0, _helpers.calculateDecorations)(decorateOnTreeView, messages));
  }
  applyDecorations(decorations) {
    const treeViewElement = TreeView.getElement();
    if (!treeViewElement) {
      return;
    }

    const elementCache = {};
    const appliedDecorations = {};

    for (const filePath in this.decorations) {
      if (!{}.hasOwnProperty.call(this.decorations, filePath)) {
        continue;
      }
      if (!decorations[filePath]) {
        // Removed
        const element = elementCache[filePath] || (elementCache[filePath] = TreeView.getElementByPath(treeViewElement, filePath));
        if (element) {
          this.removeDecoration(element);
        }
      }
    }

    for (const filePath in decorations) {
      if (!{}.hasOwnProperty.call(decorations, filePath)) {
        continue;
      }
      const element = elementCache[filePath] || (elementCache[filePath] = TreeView.getElementByPath(treeViewElement, filePath));
      if (element) {
        this.handleDecoration(element, !!this.decorations[filePath], decorations[filePath]);
        appliedDecorations[filePath] = decorations[filePath];
      }
    }
    this.decorations = appliedDecorations;
  }
  handleDecoration(element, update = false, highlights) {
    let decoration;
    if (update) {
      decoration = element.querySelector('linter-decoration');
    }
    if (decoration) {
      decoration.className = '';
    } else {
      decoration = document.createElement('linter-decoration');
      element.appendChild(decoration);
    }
    if (highlights.error) {
      decoration.classList.add('linter-error');
    } else if (highlights.warning) {
      decoration.classList.add('linter-warning');
    } else if (highlights.info) {
      decoration.classList.add('linter-info');
    }
  }
  removeDecoration(element) {
    const decoration = element.querySelector('linter-decoration');
    if (decoration) {
      decoration.remove();
    }
  }
  dispose() {
    this.subscriptions.dispose();
  }
  static getElement() {
    return document.querySelector('.tree-view');
  }
  static getElementByPath(parent, filePath) {
    return parent.querySelector(`[data-path=${CSS.escape(filePath)}]`);
  }
};
exports.default = TreeView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,