'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _selectorKit = require('selector-kit');

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _scopeHelpers = require('./scope-helpers');

var _privateSymbols = require('./private-symbols');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let ProviderMetadata = class ProviderMetadata {
  constructor(provider, apiVersion) {
    // TODO API: remove this when 2.0 support is removed

    this.provider = provider;
    this.apiVersion = apiVersion;
    if (this.provider.selector != null) {
      this.scopeSelectors = _selectorKit.Selector.create(this.provider.selector);
    } else {
      this.scopeSelectors = _selectorKit.Selector.create(this.provider.scopeSelector);
    }

    // TODO API: remove this when 2.0 support is removed
    if (this.provider.disableForSelector != null) {
      this.disableForScopeSelectors = _selectorKit.Selector.create(this.provider.disableForSelector);
    } else if (this.provider.disableForScopeSelector != null) {
      this.disableForScopeSelectors = _selectorKit.Selector.create(this.provider.disableForScopeSelector);
    }

    // TODO API: remove this when 1.0 support is removed
    let providerBlacklist;
    if (this.provider.providerblacklist && this.provider.providerblacklist['autocomplete-plus-fuzzyprovider']) {
      providerBlacklist = this.provider.providerblacklist['autocomplete-plus-fuzzyprovider'];
    }
    if (providerBlacklist) {
      this.disableDefaultProviderSelectors = _selectorKit.Selector.create(providerBlacklist);
    }

    this.enableCustomTextEditorSelector = _semver2.default.satisfies(this.provider[_privateSymbols.API_VERSION], '>=3.0.0');
  }

  matchesEditor(editor) {
    if (this.enableCustomTextEditorSelector && this.provider.getTextEditorSelector != null) {
      return atom.views.getView(editor).matches(this.provider.getTextEditorSelector());
    } else {
      // Backwards compatibility.
      return atom.views.getView(editor).matches('atom-pane > .item-views > atom-text-editor');
    }
  }

  matchesScopeChain(scopeChain) {
    if (this.disableForScopeSelectors != null) {
      if ((0, _scopeHelpers.selectorsMatchScopeChain)(this.disableForScopeSelectors, scopeChain)) {
        return false;
      }
    }

    if ((0, _scopeHelpers.selectorsMatchScopeChain)(this.scopeSelectors, scopeChain)) {
      return true;
    } else {
      return false;
    }
  }

  shouldDisableDefaultProvider(scopeChain) {
    if (this.disableDefaultProviderSelectors != null) {
      return (0, _scopeHelpers.selectorsMatchScopeChain)(this.disableDefaultProviderSelectors, scopeChain);
    } else {
      return false;
    }
  }

  getSpecificity(scopeChain) {
    const selector = (0, _scopeHelpers.selectorForScopeChain)(this.scopeSelectors, scopeChain);
    if (selector) {
      return selector.getSpecificity();
    } else {
      return 0;
    }
  }
};
exports.default = ProviderMetadata;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3ZpZGVyLW1ldGFkYXRhLmpzIl0sIm5hbWVzIjpbIlByb3ZpZGVyTWV0YWRhdGEiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVyIiwiYXBpVmVyc2lvbiIsInNlbGVjdG9yIiwic2NvcGVTZWxlY3RvcnMiLCJjcmVhdGUiLCJzY29wZVNlbGVjdG9yIiwiZGlzYWJsZUZvclNlbGVjdG9yIiwiZGlzYWJsZUZvclNjb3BlU2VsZWN0b3JzIiwiZGlzYWJsZUZvclNjb3BlU2VsZWN0b3IiLCJwcm92aWRlckJsYWNrbGlzdCIsInByb3ZpZGVyYmxhY2tsaXN0IiwiZGlzYWJsZURlZmF1bHRQcm92aWRlclNlbGVjdG9ycyIsImVuYWJsZUN1c3RvbVRleHRFZGl0b3JTZWxlY3RvciIsInNhdGlzZmllcyIsIm1hdGNoZXNFZGl0b3IiLCJlZGl0b3IiLCJnZXRUZXh0RWRpdG9yU2VsZWN0b3IiLCJhdG9tIiwidmlld3MiLCJnZXRWaWV3IiwibWF0Y2hlcyIsIm1hdGNoZXNTY29wZUNoYWluIiwic2NvcGVDaGFpbiIsInNob3VsZERpc2FibGVEZWZhdWx0UHJvdmlkZXIiLCJnZXRTcGVjaWZpY2l0eSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFFQTs7QUFDQTs7OztBQUNBOztBQUVBOzs7O0lBRXFCQSxnQixHQUFOLE1BQU1BLGdCQUFOLENBQXVCO0FBQ3BDQyxjQUFhQyxRQUFiLEVBQXVCQyxVQUF2QixFQUFtQztBQUNqQzs7QUFFQSxTQUFLRCxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtDLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsUUFBSSxLQUFLRCxRQUFMLENBQWNFLFFBQWQsSUFBMEIsSUFBOUIsRUFBb0M7QUFDbEMsV0FBS0MsY0FBTCxHQUFzQixzQkFBU0MsTUFBVCxDQUFnQixLQUFLSixRQUFMLENBQWNFLFFBQTlCLENBQXRCO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsV0FBS0MsY0FBTCxHQUFzQixzQkFBU0MsTUFBVCxDQUFnQixLQUFLSixRQUFMLENBQWNLLGFBQTlCLENBQXRCO0FBQ0Q7O0FBRUQ7QUFDQSxRQUFJLEtBQUtMLFFBQUwsQ0FBY00sa0JBQWQsSUFBb0MsSUFBeEMsRUFBOEM7QUFDNUMsV0FBS0Msd0JBQUwsR0FBZ0Msc0JBQVNILE1BQVQsQ0FBZ0IsS0FBS0osUUFBTCxDQUFjTSxrQkFBOUIsQ0FBaEM7QUFDRCxLQUZELE1BRU8sSUFBSSxLQUFLTixRQUFMLENBQWNRLHVCQUFkLElBQXlDLElBQTdDLEVBQW1EO0FBQ3hELFdBQUtELHdCQUFMLEdBQWdDLHNCQUFTSCxNQUFULENBQWdCLEtBQUtKLFFBQUwsQ0FBY1EsdUJBQTlCLENBQWhDO0FBQ0Q7O0FBRUQ7QUFDQSxRQUFJQyxpQkFBSjtBQUNBLFFBQUksS0FBS1QsUUFBTCxDQUFjVSxpQkFBZCxJQUFtQyxLQUFLVixRQUFMLENBQWNVLGlCQUFkLENBQWdDLGlDQUFoQyxDQUF2QyxFQUEyRztBQUN6R0QsMEJBQW9CLEtBQUtULFFBQUwsQ0FBY1UsaUJBQWQsQ0FBZ0MsaUNBQWhDLENBQXBCO0FBQ0Q7QUFDRCxRQUFJRCxpQkFBSixFQUF1QjtBQUNyQixXQUFLRSwrQkFBTCxHQUF1QyxzQkFBU1AsTUFBVCxDQUFnQkssaUJBQWhCLENBQXZDO0FBQ0Q7O0FBRUQsU0FBS0csOEJBQUwsR0FBc0MsaUJBQU9DLFNBQVAsQ0FBaUIsS0FBS2IsUUFBTCw2QkFBakIsRUFBNkMsU0FBN0MsQ0FBdEM7QUFDRDs7QUFFRGMsZ0JBQWVDLE1BQWYsRUFBdUI7QUFDckIsUUFBSSxLQUFLSCw4QkFBTCxJQUF3QyxLQUFLWixRQUFMLENBQWNnQixxQkFBZCxJQUF1QyxJQUFuRixFQUEwRjtBQUN4RixhQUFPQyxLQUFLQyxLQUFMLENBQVdDLE9BQVgsQ0FBbUJKLE1BQW5CLEVBQTJCSyxPQUEzQixDQUFtQyxLQUFLcEIsUUFBTCxDQUFjZ0IscUJBQWQsRUFBbkMsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMO0FBQ0EsYUFBT0MsS0FBS0MsS0FBTCxDQUFXQyxPQUFYLENBQW1CSixNQUFuQixFQUEyQkssT0FBM0IsQ0FBbUMsNENBQW5DLENBQVA7QUFDRDtBQUNGOztBQUVEQyxvQkFBbUJDLFVBQW5CLEVBQStCO0FBQzdCLFFBQUksS0FBS2Ysd0JBQUwsSUFBaUMsSUFBckMsRUFBMkM7QUFDekMsVUFBSSw0Q0FBeUIsS0FBS0Esd0JBQTlCLEVBQXdEZSxVQUF4RCxDQUFKLEVBQXlFO0FBQUUsZUFBTyxLQUFQO0FBQWM7QUFDMUY7O0FBRUQsUUFBSSw0Q0FBeUIsS0FBS25CLGNBQTlCLEVBQThDbUIsVUFBOUMsQ0FBSixFQUErRDtBQUM3RCxhQUFPLElBQVA7QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPLEtBQVA7QUFDRDtBQUNGOztBQUVEQywrQkFBOEJELFVBQTlCLEVBQTBDO0FBQ3hDLFFBQUksS0FBS1gsK0JBQUwsSUFBd0MsSUFBNUMsRUFBa0Q7QUFDaEQsYUFBTyw0Q0FBeUIsS0FBS0EsK0JBQTlCLEVBQStEVyxVQUEvRCxDQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBTyxLQUFQO0FBQ0Q7QUFDRjs7QUFFREUsaUJBQWdCRixVQUFoQixFQUE0QjtBQUMxQixVQUFNcEIsV0FBVyx5Q0FBc0IsS0FBS0MsY0FBM0IsRUFBMkNtQixVQUEzQyxDQUFqQjtBQUNBLFFBQUlwQixRQUFKLEVBQWM7QUFDWixhQUFPQSxTQUFTc0IsY0FBVCxFQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBTyxDQUFQO0FBQ0Q7QUFDRjtBQW5FbUMsQztrQkFBakIxQixnQiIsImZpbGUiOiJwcm92aWRlci1tZXRhZGF0YS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5cbmltcG9ydCB7IFNlbGVjdG9yIH0gZnJvbSAnc2VsZWN0b3Ita2l0J1xuaW1wb3J0IHNlbXZlciBmcm9tICdzZW12ZXInXG5pbXBvcnQgeyBzZWxlY3RvckZvclNjb3BlQ2hhaW4sIHNlbGVjdG9yc01hdGNoU2NvcGVDaGFpbiB9IGZyb20gJy4vc2NvcGUtaGVscGVycydcblxuaW1wb3J0IHsgQVBJX1ZFUlNJT04gfSBmcm9tICcuL3ByaXZhdGUtc3ltYm9scydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvdmlkZXJNZXRhZGF0YSB7XG4gIGNvbnN0cnVjdG9yIChwcm92aWRlciwgYXBpVmVyc2lvbikge1xuICAgIC8vIFRPRE8gQVBJOiByZW1vdmUgdGhpcyB3aGVuIDIuMCBzdXBwb3J0IGlzIHJlbW92ZWRcblxuICAgIHRoaXMucHJvdmlkZXIgPSBwcm92aWRlclxuICAgIHRoaXMuYXBpVmVyc2lvbiA9IGFwaVZlcnNpb25cbiAgICBpZiAodGhpcy5wcm92aWRlci5zZWxlY3RvciAhPSBudWxsKSB7XG4gICAgICB0aGlzLnNjb3BlU2VsZWN0b3JzID0gU2VsZWN0b3IuY3JlYXRlKHRoaXMucHJvdmlkZXIuc2VsZWN0b3IpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2NvcGVTZWxlY3RvcnMgPSBTZWxlY3Rvci5jcmVhdGUodGhpcy5wcm92aWRlci5zY29wZVNlbGVjdG9yKVxuICAgIH1cblxuICAgIC8vIFRPRE8gQVBJOiByZW1vdmUgdGhpcyB3aGVuIDIuMCBzdXBwb3J0IGlzIHJlbW92ZWRcbiAgICBpZiAodGhpcy5wcm92aWRlci5kaXNhYmxlRm9yU2VsZWN0b3IgIT0gbnVsbCkge1xuICAgICAgdGhpcy5kaXNhYmxlRm9yU2NvcGVTZWxlY3RvcnMgPSBTZWxlY3Rvci5jcmVhdGUodGhpcy5wcm92aWRlci5kaXNhYmxlRm9yU2VsZWN0b3IpXG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3ZpZGVyLmRpc2FibGVGb3JTY29wZVNlbGVjdG9yICE9IG51bGwpIHtcbiAgICAgIHRoaXMuZGlzYWJsZUZvclNjb3BlU2VsZWN0b3JzID0gU2VsZWN0b3IuY3JlYXRlKHRoaXMucHJvdmlkZXIuZGlzYWJsZUZvclNjb3BlU2VsZWN0b3IpXG4gICAgfVxuXG4gICAgLy8gVE9ETyBBUEk6IHJlbW92ZSB0aGlzIHdoZW4gMS4wIHN1cHBvcnQgaXMgcmVtb3ZlZFxuICAgIGxldCBwcm92aWRlckJsYWNrbGlzdFxuICAgIGlmICh0aGlzLnByb3ZpZGVyLnByb3ZpZGVyYmxhY2tsaXN0ICYmIHRoaXMucHJvdmlkZXIucHJvdmlkZXJibGFja2xpc3RbJ2F1dG9jb21wbGV0ZS1wbHVzLWZ1enp5cHJvdmlkZXInXSkge1xuICAgICAgcHJvdmlkZXJCbGFja2xpc3QgPSB0aGlzLnByb3ZpZGVyLnByb3ZpZGVyYmxhY2tsaXN0WydhdXRvY29tcGxldGUtcGx1cy1mdXp6eXByb3ZpZGVyJ11cbiAgICB9XG4gICAgaWYgKHByb3ZpZGVyQmxhY2tsaXN0KSB7XG4gICAgICB0aGlzLmRpc2FibGVEZWZhdWx0UHJvdmlkZXJTZWxlY3RvcnMgPSBTZWxlY3Rvci5jcmVhdGUocHJvdmlkZXJCbGFja2xpc3QpXG4gICAgfVxuXG4gICAgdGhpcy5lbmFibGVDdXN0b21UZXh0RWRpdG9yU2VsZWN0b3IgPSBzZW12ZXIuc2F0aXNmaWVzKHRoaXMucHJvdmlkZXJbQVBJX1ZFUlNJT05dLCAnPj0zLjAuMCcpXG4gIH1cblxuICBtYXRjaGVzRWRpdG9yIChlZGl0b3IpIHtcbiAgICBpZiAodGhpcy5lbmFibGVDdXN0b21UZXh0RWRpdG9yU2VsZWN0b3IgJiYgKHRoaXMucHJvdmlkZXIuZ2V0VGV4dEVkaXRvclNlbGVjdG9yICE9IG51bGwpKSB7XG4gICAgICByZXR1cm4gYXRvbS52aWV3cy5nZXRWaWV3KGVkaXRvcikubWF0Y2hlcyh0aGlzLnByb3ZpZGVyLmdldFRleHRFZGl0b3JTZWxlY3RvcigpKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgICAgIHJldHVybiBhdG9tLnZpZXdzLmdldFZpZXcoZWRpdG9yKS5tYXRjaGVzKCdhdG9tLXBhbmUgPiAuaXRlbS12aWV3cyA+IGF0b20tdGV4dC1lZGl0b3InKVxuICAgIH1cbiAgfVxuXG4gIG1hdGNoZXNTY29wZUNoYWluIChzY29wZUNoYWluKSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZUZvclNjb3BlU2VsZWN0b3JzICE9IG51bGwpIHtcbiAgICAgIGlmIChzZWxlY3RvcnNNYXRjaFNjb3BlQ2hhaW4odGhpcy5kaXNhYmxlRm9yU2NvcGVTZWxlY3RvcnMsIHNjb3BlQ2hhaW4pKSB7IHJldHVybiBmYWxzZSB9XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdG9yc01hdGNoU2NvcGVDaGFpbih0aGlzLnNjb3BlU2VsZWN0b3JzLCBzY29wZUNoYWluKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgc2hvdWxkRGlzYWJsZURlZmF1bHRQcm92aWRlciAoc2NvcGVDaGFpbikge1xuICAgIGlmICh0aGlzLmRpc2FibGVEZWZhdWx0UHJvdmlkZXJTZWxlY3RvcnMgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yc01hdGNoU2NvcGVDaGFpbih0aGlzLmRpc2FibGVEZWZhdWx0UHJvdmlkZXJTZWxlY3RvcnMsIHNjb3BlQ2hhaW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGdldFNwZWNpZmljaXR5IChzY29wZUNoYWluKSB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBzZWxlY3RvckZvclNjb3BlQ2hhaW4odGhpcy5zY29wZVNlbGVjdG9ycywgc2NvcGVDaGFpbilcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBzZWxlY3Rvci5nZXRTcGVjaWZpY2l0eSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwXG4gICAgfVxuICB9XG59XG4iXX0=