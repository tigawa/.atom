Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _humanizeTime = require('humanize-time');

var _humanizeTime2 = _interopRequireDefault(_humanizeTime);

var _atom = require('atom');

var _provider = require('./provider');

var _provider2 = _interopRequireDefault(_provider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let Registry = class Registry {

  constructor() {
    this.emitter = new _atom.Emitter();
    this.providers = new Set();
    this.itemsActive = [];
    this.itemsHistory = [];
    this.subscriptions = new _atom.CompositeDisposable();

    this.subscriptions.add(this.emitter);
    this.subscriptions.add(atom.config.observe('busy-signal.itemsToShowInHistory', itemsToShowInHistory => {
      const previousValue = this.itemsToShowInHistory;
      this.itemsToShowInHistory = parseInt(itemsToShowInHistory, 10);
      if (typeof previousValue === 'number') {
        this.emitter.emit('did-update');
      }
    }));
  }
  // Public method
  create() {
    const provider = new _provider2.default();
    provider.onDidAdd(status => {
      this.statusAdd(provider, status);
    });
    provider.onDidRemove(title => {
      this.statusRemove(provider, title);
    });
    provider.onDidClear(() => {
      this.statusClear(provider);
    });
    provider.onDidDispose(() => {
      this.statusClear(provider);
      this.providers.delete(provider);
    });
    this.providers.add(provider);
    return provider;
  }
  statusAdd(provider, status) {
    for (let i = 0; i < this.itemsActive.length; i++) {
      const entry = this.itemsActive[i];
      if (entry.title === status.title && entry.provider === provider) {
        // Item already exists, ignore
        break;
      }
    }

    this.itemsActive.push({
      title: status.title,
      priority: status.priority,
      provider,
      timeAdded: Date.now(),
      timeRemoved: null
    });
    this.emitter.emit('did-update');
  }
  statusRemove(provider, title) {
    for (let i = 0; i < this.itemsActive.length; i++) {
      const entry = this.itemsActive[i];
      if (entry.provider === provider && entry.title === title) {
        this.pushIntoHistory(i, entry);
        this.emitter.emit('did-update');
        break;
      }
    }
  }
  statusClear(provider) {
    let triggerUpdate = false;
    for (let i = 0; i < this.itemsActive.length; i++) {
      const entry = this.itemsActive[i];
      if (entry.provider === provider) {
        this.pushIntoHistory(i, entry);
        triggerUpdate = true;
        i--;
      }
    }
    if (triggerUpdate) {
      this.emitter.emit('did-update');
    }
  }
  pushIntoHistory(index, item) {
    item.timeRemoved = Date.now();
    this.itemsActive.splice(index, 1);
    this.itemsHistory = this.itemsHistory.concat([item]).slice(-1000);
  }
  getActiveTitles() {
    return this.itemsActive.slice().sort(function (a, b) {
      return a.priority - b.priority;
    }).map(i => i.title);
  }
  getOldTitles() {
    const toReturn = [];
    const history = this.itemsHistory;
    const activeTitles = this.getActiveTitles();
    const mergedTogether = history.map(i => i.title).concat(activeTitles);

    for (let i = 0, length = history.length; i < length; i++) {
      const item = history[i];
      if (mergedTogether.lastIndexOf(item.title) === i) {
        toReturn.push({
          title: item.title,
          duration: (0, _humanizeTime2.default)(item.timeRemoved && item.timeRemoved - item.timeAdded)
        });
      }
    }

    return toReturn.slice(-1 * this.itemsToShowInHistory);
  }
  onDidUpdate(callback) {
    return this.emitter.on('did-update', callback);
  }
  dispose() {
    this.subscriptions.dispose();
    for (const provider of this.providers) {
      provider.dispose();
    }
  }
};
exports.default = Registry;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,