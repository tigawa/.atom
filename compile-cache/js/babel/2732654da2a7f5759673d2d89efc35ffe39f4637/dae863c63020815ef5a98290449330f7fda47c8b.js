'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});
let RefCountedTokenList = class RefCountedTokenList {
  constructor() {
    this.clear();
  }

  clear() {
    this.references = {};
    this.tokens = [];
  }

  getLength() {
    return this.tokens.length;
  }

  getTokens() {
    return this.tokens;
  }

  getTokenWrappers() {
    return (() => {
      const result = [];
      for (const key in this.references) {
        const tokenWrapper = this.references[key];
        result.push(tokenWrapper);
      }
      return result;
    })();
  }

  getToken(tokenKey) {
    const wrapper = this.getTokenWrapper(tokenKey);
    if (wrapper) {
      return wrapper.token;
    }
  }

  getTokenWrapper(tokenKey) {
    tokenKey = this.getTokenKey(tokenKey);
    return this.references[tokenKey];
  }

  refCountForToken(tokenKey) {
    tokenKey = this.getTokenKey(tokenKey);
    if (this.references[tokenKey] && this.references[tokenKey].count) {
      return this.references[tokenKey].count;
    }
    return 0;
  }

  addToken(token, tokenKey) {
    tokenKey = this.getTokenKey(token, tokenKey);
    return this.updateRefCount(tokenKey, token, 1);
  }

  // Returns true when the token was removed
  // Returns false when the token was not present and thus not removed
  removeToken(token, tokenKey) {
    tokenKey = this.getTokenKey(token, tokenKey);
    if (this.references[tokenKey] != null) {
      ({ token } = this.references[tokenKey]);
      this.updateRefCount(tokenKey, token, -1);
      return true;
    } else {
      return false;
    }
  }

  /*
  Private Methods
  */

  updateRefCount(tokenKey, token, increment) {
    if (increment > 0 && this.references[tokenKey] == null) {
      if (this.references[tokenKey] == null) {
        this.references[tokenKey] = { tokenKey, token, count: 0 };
      }
      this.addTokenToList(token);
    }

    if (this.references[tokenKey] != null) {
      this.references[tokenKey].count += increment;
    }

    if (this.references[tokenKey] && this.references[tokenKey].count <= 0) {
      delete this.references[tokenKey];
      return this.removeTokenFromList(token);
    }
  }

  addTokenToList(token) {
    return this.tokens.push(token);
  }

  removeTokenFromList(token) {
    const index = this.tokens.indexOf(token);
    if (index > -1) {
      return this.tokens.splice(index, 1);
    }
  }

  getTokenKey(token, tokenKey) {
    // some words are reserved, like 'constructor' :/
    if (tokenKey) {
      return tokenKey + '$$';
    }

    return token + '$$';
  }
};
exports.default = RefCountedTokenList;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZi1jb3VudGVkLXRva2VuLWxpc3QuanMiXSwibmFtZXMiOlsiUmVmQ291bnRlZFRva2VuTGlzdCIsImNvbnN0cnVjdG9yIiwiY2xlYXIiLCJyZWZlcmVuY2VzIiwidG9rZW5zIiwiZ2V0TGVuZ3RoIiwibGVuZ3RoIiwiZ2V0VG9rZW5zIiwiZ2V0VG9rZW5XcmFwcGVycyIsInJlc3VsdCIsImtleSIsInRva2VuV3JhcHBlciIsInB1c2giLCJnZXRUb2tlbiIsInRva2VuS2V5Iiwid3JhcHBlciIsImdldFRva2VuV3JhcHBlciIsInRva2VuIiwiZ2V0VG9rZW5LZXkiLCJyZWZDb3VudEZvclRva2VuIiwiY291bnQiLCJhZGRUb2tlbiIsInVwZGF0ZVJlZkNvdW50IiwicmVtb3ZlVG9rZW4iLCJpbmNyZW1lbnQiLCJhZGRUb2tlblRvTGlzdCIsInJlbW92ZVRva2VuRnJvbUxpc3QiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7OztJQUVxQkEsbUIsR0FBTixNQUFNQSxtQkFBTixDQUEwQjtBQUN2Q0MsZ0JBQWU7QUFDYixTQUFLQyxLQUFMO0FBQ0Q7O0FBRURBLFVBQVM7QUFDUCxTQUFLQyxVQUFMLEdBQWtCLEVBQWxCO0FBQ0EsU0FBS0MsTUFBTCxHQUFjLEVBQWQ7QUFDRDs7QUFFREMsY0FBYTtBQUFFLFdBQU8sS0FBS0QsTUFBTCxDQUFZRSxNQUFuQjtBQUEyQjs7QUFFMUNDLGNBQWE7QUFBRSxXQUFPLEtBQUtILE1BQVo7QUFBb0I7O0FBRW5DSSxxQkFBb0I7QUFDbEIsV0FBUSxDQUFDLE1BQU07QUFDYixZQUFNQyxTQUFTLEVBQWY7QUFDQSxXQUFLLE1BQU1DLEdBQVgsSUFBa0IsS0FBS1AsVUFBdkIsRUFBbUM7QUFDakMsY0FBTVEsZUFBZSxLQUFLUixVQUFMLENBQWdCTyxHQUFoQixDQUFyQjtBQUNBRCxlQUFPRyxJQUFQLENBQVlELFlBQVo7QUFDRDtBQUNELGFBQU9GLE1BQVA7QUFDRCxLQVBPLEdBQVI7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LEtBQW5CLEVBQTBCLENBQTFCLENBQVA7QUFBcUM7QUFDeEQ7O0FBRURULGNBQWFELEtBQWIsRUFBb0JILFFBQXBCLEVBQThCO0FBQzVCO0FBQ0EsUUFBSUEsUUFBSixFQUFjO0FBQ1osYUFBT0EsV0FBVyxJQUFsQjtBQUNEOztBQUVELFdBQU9HLFFBQVEsSUFBZjtBQUNEO0FBakdzQyxDO2tCQUFwQmpCLG1CIiwiZmlsZSI6InJlZi1jb3VudGVkLXRva2VuLWxpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWZDb3VudGVkVG9rZW5MaXN0IHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuY2xlYXIoKVxuICB9XG5cbiAgY2xlYXIgKCkge1xuICAgIHRoaXMucmVmZXJlbmNlcyA9IHt9XG4gICAgdGhpcy50b2tlbnMgPSBbXVxuICB9XG5cbiAgZ2V0TGVuZ3RoICgpIHsgcmV0dXJuIHRoaXMudG9rZW5zLmxlbmd0aCB9XG5cbiAgZ2V0VG9rZW5zICgpIHsgcmV0dXJuIHRoaXMudG9rZW5zIH1cblxuICBnZXRUb2tlbldyYXBwZXJzICgpIHtcbiAgICByZXR1cm4gKCgoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBbXVxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5yZWZlcmVuY2VzKSB7XG4gICAgICAgIGNvbnN0IHRva2VuV3JhcHBlciA9IHRoaXMucmVmZXJlbmNlc1trZXldXG4gICAgICAgIHJlc3VsdC5wdXNoKHRva2VuV3JhcHBlcilcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9KSgpKVxuICB9XG5cbiAgZ2V0VG9rZW4gKHRva2VuS2V5KSB7XG4gICAgY29uc3Qgd3JhcHBlciA9IHRoaXMuZ2V0VG9rZW5XcmFwcGVyKHRva2VuS2V5KVxuICAgIGlmICh3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gd3JhcHBlci50b2tlblxuICAgIH1cbiAgfVxuXG4gIGdldFRva2VuV3JhcHBlciAodG9rZW5LZXkpIHtcbiAgICB0b2tlbktleSA9IHRoaXMuZ2V0VG9rZW5LZXkodG9rZW5LZXkpXG4gICAgcmV0dXJuIHRoaXMucmVmZXJlbmNlc1t0b2tlbktleV1cbiAgfVxuXG4gIHJlZkNvdW50Rm9yVG9rZW4gKHRva2VuS2V5KSB7XG4gICAgdG9rZW5LZXkgPSB0aGlzLmdldFRva2VuS2V5KHRva2VuS2V5KVxuICAgIGlmICh0aGlzLnJlZmVyZW5jZXNbdG9rZW5LZXldICYmIHRoaXMucmVmZXJlbmNlc1t0b2tlbktleV0uY291bnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZmVyZW5jZXNbdG9rZW5LZXldLmNvdW50XG4gICAgfVxuICAgIHJldHVybiAwXG4gIH1cblxuICBhZGRUb2tlbiAodG9rZW4sIHRva2VuS2V5KSB7XG4gICAgdG9rZW5LZXkgPSB0aGlzLmdldFRva2VuS2V5KHRva2VuLCB0b2tlbktleSlcbiAgICByZXR1cm4gdGhpcy51cGRhdGVSZWZDb3VudCh0b2tlbktleSwgdG9rZW4sIDEpXG4gIH1cblxuICAvLyBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdG9rZW4gd2FzIHJlbW92ZWRcbiAgLy8gUmV0dXJucyBmYWxzZSB3aGVuIHRoZSB0b2tlbiB3YXMgbm90IHByZXNlbnQgYW5kIHRodXMgbm90IHJlbW92ZWRcbiAgcmVtb3ZlVG9rZW4gKHRva2VuLCB0b2tlbktleSkge1xuICAgIHRva2VuS2V5ID0gdGhpcy5nZXRUb2tlbktleSh0b2tlbiwgdG9rZW5LZXkpXG4gICAgaWYgKHRoaXMucmVmZXJlbmNlc1t0b2tlbktleV0gIT0gbnVsbCkge1xuICAgICAgKHsgdG9rZW4gfSA9IHRoaXMucmVmZXJlbmNlc1t0b2tlbktleV0pXG4gICAgICB0aGlzLnVwZGF0ZVJlZkNvdW50KHRva2VuS2V5LCB0b2tlbiwgLTEpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICAvKlxuICBQcml2YXRlIE1ldGhvZHNcbiAgKi9cblxuICB1cGRhdGVSZWZDb3VudCAodG9rZW5LZXksIHRva2VuLCBpbmNyZW1lbnQpIHtcbiAgICBpZiAoaW5jcmVtZW50ID4gMCAmJiAodGhpcy5yZWZlcmVuY2VzW3Rva2VuS2V5XSA9PSBudWxsKSkge1xuICAgICAgaWYgKHRoaXMucmVmZXJlbmNlc1t0b2tlbktleV0gPT0gbnVsbCkgeyB0aGlzLnJlZmVyZW5jZXNbdG9rZW5LZXldID0ge3Rva2VuS2V5LCB0b2tlbiwgY291bnQ6IDB9IH1cbiAgICAgIHRoaXMuYWRkVG9rZW5Ub0xpc3QodG9rZW4pXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVmZXJlbmNlc1t0b2tlbktleV0gIT0gbnVsbCkgeyB0aGlzLnJlZmVyZW5jZXNbdG9rZW5LZXldLmNvdW50ICs9IGluY3JlbWVudCB9XG5cbiAgICBpZiAodGhpcy5yZWZlcmVuY2VzW3Rva2VuS2V5XSAmJiB0aGlzLnJlZmVyZW5jZXNbdG9rZW5LZXldLmNvdW50IDw9IDApIHtcbiAgICAgIGRlbGV0ZSB0aGlzLnJlZmVyZW5jZXNbdG9rZW5LZXldXG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVUb2tlbkZyb21MaXN0KHRva2VuKVxuICAgIH1cbiAgfVxuXG4gIGFkZFRva2VuVG9MaXN0ICh0b2tlbikge1xuICAgIHJldHVybiB0aGlzLnRva2Vucy5wdXNoKHRva2VuKVxuICB9XG5cbiAgcmVtb3ZlVG9rZW5Gcm9tTGlzdCAodG9rZW4pIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMudG9rZW5zLmluZGV4T2YodG9rZW4pXG4gICAgaWYgKGluZGV4ID4gLTEpIHsgcmV0dXJuIHRoaXMudG9rZW5zLnNwbGljZShpbmRleCwgMSkgfVxuICB9XG5cbiAgZ2V0VG9rZW5LZXkgKHRva2VuLCB0b2tlbktleSkge1xuICAgIC8vIHNvbWUgd29yZHMgYXJlIHJlc2VydmVkLCBsaWtlICdjb25zdHJ1Y3RvcicgOi9cbiAgICBpZiAodG9rZW5LZXkpIHtcbiAgICAgIHJldHVybiB0b2tlbktleSArICckJCdcbiAgICB9XG5cbiAgICByZXR1cm4gdG9rZW4gKyAnJCQnXG4gIH1cbn1cbiJdfQ==