Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getChunks = getChunks;
exports.getChunksByProjects = getChunksByProjects;
exports.mergeChange = mergeChange;
exports.calculateDecorations = calculateDecorations;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _helpers = require('../helpers');

function getChunks(filePath, projectPath) {
  var toReturn = [];
  var chunks = filePath.split(_path2['default'].sep);
  while (chunks.length) {
    var currentPath = chunks.join(_path2['default'].sep);
    toReturn.push(currentPath);
    if (currentPath === projectPath) {
      break;
    }
    chunks.pop();
  }
  return toReturn;
}

function getChunksByProjects(filePath, projectPaths) {
  if (projectPaths.length < 3) {
    if (filePath.indexOf(projectPaths[0]) === 0) {
      return getChunks(filePath, projectPaths[0]);
    }
    if (filePath.indexOf(projectPaths[1]) === 0) {
      return getChunks(filePath, projectPaths[1]);
    }
    if (filePath.indexOf(projectPaths[2]) === 0) {
      return getChunks(filePath, projectPaths[2]);
    }
    return [filePath];
  }
  for (var i = 0, _length = projectPaths.length; i < _length; i++) {
    var projectPath = projectPaths[i];
    if (filePath.indexOf(projectPath) === 0) {
      return getChunks(filePath, projectPath);
    }
  }
  return [filePath];
}

function mergeChange(change, filePath, severity) {
  if (!change[filePath]) {
    change[filePath] = {
      info: false,
      error: false,
      warning: false
    };
  }
  change[filePath][severity] = true;
}

function calculateDecorations(decorateOnTreeView, messages) {
  var toReturn = {};
  var projectPaths = atom.project.getPaths();
  messages.forEach(function (message) {
    var filePath = (0, _helpers.$file)(message);
    if (filePath) {
      var chunks = decorateOnTreeView === 'Files' ? [filePath] : getChunksByProjects(filePath, projectPaths);
      chunks.forEach(function (chunk) {
        return mergeChange(toReturn, chunk, message.severity);
      });
    }
  });
  return toReturn;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9pZ2F3YXRhaWljaGkvLmF0b20vcGFja2FnZXMvbGludGVyLXVpLWRlZmF1bHQvbGliL3RyZWUtdmlldy9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7b0JBRWlCLE1BQU07Ozs7dUJBQ0QsWUFBWTs7QUFHM0IsU0FBUyxTQUFTLENBQUMsUUFBZ0IsRUFBRSxXQUFtQixFQUFpQjtBQUM5RSxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUE7QUFDbkIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxrQkFBSyxHQUFHLENBQUMsQ0FBQTtBQUN2QyxTQUFPLE1BQU0sQ0FBQyxNQUFNLEVBQUU7QUFDcEIsUUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBSyxHQUFHLENBQUMsQ0FBQTtBQUN6QyxZQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQzFCLFFBQUksV0FBVyxLQUFLLFdBQVcsRUFBRTtBQUMvQixZQUFLO0tBQ047QUFDRCxVQUFNLENBQUMsR0FBRyxFQUFFLENBQUE7R0FDYjtBQUNELFNBQU8sUUFBUSxDQUFBO0NBQ2hCOztBQUVNLFNBQVMsbUJBQW1CLENBQUMsUUFBZ0IsRUFBRSxZQUEyQixFQUFpQjtBQUNoRyxNQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQzNCLFFBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDM0MsYUFBTyxTQUFTLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQzVDO0FBQ0QsUUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMzQyxhQUFPLFNBQVMsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDNUM7QUFDRCxRQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzNDLGFBQU8sU0FBUyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUM1QztBQUNELFdBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtHQUNsQjtBQUNELE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxPQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDN0QsUUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ25DLFFBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDdkMsYUFBTyxTQUFTLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFBO0tBQ3hDO0dBQ0Y7QUFDRCxTQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7Q0FDbEI7O0FBRU0sU0FBUyxXQUFXLENBQUMsTUFBYyxFQUFFLFFBQWdCLEVBQUUsUUFBZ0IsRUFBUTtBQUNwRixNQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQ3JCLFVBQU0sQ0FBQyxRQUFRLENBQUMsR0FBRztBQUNqQixVQUFJLEVBQUUsS0FBSztBQUNYLFdBQUssRUFBRSxLQUFLO0FBQ1osYUFBTyxFQUFFLEtBQUs7S0FDZixDQUFBO0dBQ0Y7QUFDRCxRQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFBO0NBQ2xDOztBQUVNLFNBQVMsb0JBQW9CLENBQUMsa0JBQXFELEVBQUUsUUFBOEIsRUFBVTtBQUNsSSxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUE7QUFDbkIsTUFBTSxZQUEyQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUE7QUFDM0QsVUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFTLE9BQU8sRUFBRTtBQUNqQyxRQUFNLFFBQVEsR0FBRyxvQkFBTSxPQUFPLENBQUMsQ0FBQTtBQUMvQixRQUFJLFFBQVEsRUFBRTtBQUNaLFVBQU0sTUFBTSxHQUFHLGtCQUFrQixLQUFLLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQTtBQUN4RyxZQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztlQUFJLFdBQVcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUM7T0FBQSxDQUFDLENBQUE7S0FDeEU7R0FDRixDQUFDLENBQUE7QUFDRixTQUFPLFFBQVEsQ0FBQTtDQUNoQiIsImZpbGUiOiIvVXNlcnMvaWdhd2F0YWlpY2hpLy5hdG9tL3BhY2thZ2VzL2xpbnRlci11aS1kZWZhdWx0L2xpYi90cmVlLXZpZXcvaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCBQYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyAkZmlsZSB9IGZyb20gJy4uL2hlbHBlcnMnXG5pbXBvcnQgdHlwZSB7IExpbnRlck1lc3NhZ2UgfSBmcm9tICcuLi90eXBlcydcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENodW5rcyhmaWxlUGF0aDogc3RyaW5nLCBwcm9qZWN0UGF0aDogc3RyaW5nKTogQXJyYXk8c3RyaW5nPiB7XG4gIGNvbnN0IHRvUmV0dXJuID0gW11cbiAgY29uc3QgY2h1bmtzID0gZmlsZVBhdGguc3BsaXQoUGF0aC5zZXApXG4gIHdoaWxlIChjaHVua3MubGVuZ3RoKSB7XG4gICAgY29uc3QgY3VycmVudFBhdGggPSBjaHVua3Muam9pbihQYXRoLnNlcClcbiAgICB0b1JldHVybi5wdXNoKGN1cnJlbnRQYXRoKVxuICAgIGlmIChjdXJyZW50UGF0aCA9PT0gcHJvamVjdFBhdGgpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGNodW5rcy5wb3AoKVxuICB9XG4gIHJldHVybiB0b1JldHVyblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2h1bmtzQnlQcm9qZWN0cyhmaWxlUGF0aDogc3RyaW5nLCBwcm9qZWN0UGF0aHM6IEFycmF5PHN0cmluZz4pOiBBcnJheTxzdHJpbmc+IHtcbiAgaWYgKHByb2plY3RQYXRocy5sZW5ndGggPCAzKSB7XG4gICAgaWYgKGZpbGVQYXRoLmluZGV4T2YocHJvamVjdFBhdGhzWzBdKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGdldENodW5rcyhmaWxlUGF0aCwgcHJvamVjdFBhdGhzWzBdKVxuICAgIH1cbiAgICBpZiAoZmlsZVBhdGguaW5kZXhPZihwcm9qZWN0UGF0aHNbMV0pID09PSAwKSB7XG4gICAgICByZXR1cm4gZ2V0Q2h1bmtzKGZpbGVQYXRoLCBwcm9qZWN0UGF0aHNbMV0pXG4gICAgfVxuICAgIGlmIChmaWxlUGF0aC5pbmRleE9mKHByb2plY3RQYXRoc1syXSkgPT09IDApIHtcbiAgICAgIHJldHVybiBnZXRDaHVua3MoZmlsZVBhdGgsIHByb2plY3RQYXRoc1syXSlcbiAgICB9XG4gICAgcmV0dXJuIFtmaWxlUGF0aF1cbiAgfVxuICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gcHJvamVjdFBhdGhzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcHJvamVjdFBhdGggPSBwcm9qZWN0UGF0aHNbaV1cbiAgICBpZiAoZmlsZVBhdGguaW5kZXhPZihwcm9qZWN0UGF0aCkgPT09IDApIHtcbiAgICAgIHJldHVybiBnZXRDaHVua3MoZmlsZVBhdGgsIHByb2plY3RQYXRoKVxuICAgIH1cbiAgfVxuICByZXR1cm4gW2ZpbGVQYXRoXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDaGFuZ2UoY2hhbmdlOiBPYmplY3QsIGZpbGVQYXRoOiBzdHJpbmcsIHNldmVyaXR5OiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKCFjaGFuZ2VbZmlsZVBhdGhdKSB7XG4gICAgY2hhbmdlW2ZpbGVQYXRoXSA9IHtcbiAgICAgIGluZm86IGZhbHNlLFxuICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgd2FybmluZzogZmFsc2UsXG4gICAgfVxuICB9XG4gIGNoYW5nZVtmaWxlUGF0aF1bc2V2ZXJpdHldID0gdHJ1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlRGVjb3JhdGlvbnMoZGVjb3JhdGVPblRyZWVWaWV3OiAnRmlsZXMgYW5kIERpcmVjdG9yaWVzJyB8ICdGaWxlcycsIG1lc3NhZ2VzOiBBcnJheTxMaW50ZXJNZXNzYWdlPik6IE9iamVjdCB7XG4gIGNvbnN0IHRvUmV0dXJuID0ge31cbiAgY29uc3QgcHJvamVjdFBhdGhzOiBBcnJheTxzdHJpbmc+ID0gYXRvbS5wcm9qZWN0LmdldFBhdGhzKClcbiAgbWVzc2FnZXMuZm9yRWFjaChmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgY29uc3QgZmlsZVBhdGggPSAkZmlsZShtZXNzYWdlKVxuICAgIGlmIChmaWxlUGF0aCkge1xuICAgICAgY29uc3QgY2h1bmtzID0gZGVjb3JhdGVPblRyZWVWaWV3ID09PSAnRmlsZXMnID8gW2ZpbGVQYXRoXSA6IGdldENodW5rc0J5UHJvamVjdHMoZmlsZVBhdGgsIHByb2plY3RQYXRocylcbiAgICAgIGNodW5rcy5mb3JFYWNoKGNodW5rID0+IG1lcmdlQ2hhbmdlKHRvUmV0dXJuLCBjaHVuaywgbWVzc2FnZS5zZXZlcml0eSkpXG4gICAgfVxuICB9KVxuICByZXR1cm4gdG9SZXR1cm5cbn1cbiJdfQ==