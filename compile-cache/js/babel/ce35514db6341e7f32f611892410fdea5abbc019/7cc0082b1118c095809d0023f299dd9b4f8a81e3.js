'use babel';

function computeWordDiff(oldText, newText) {
  var addedWords = [];
  var removedWords = [];

  if (oldText && newText) {
    // defensive fix for #60
    var JsDiff = require('diff');
    var wordDiff = JsDiff.diffWordsWithSpace(oldText, newText);

    // split into two lists: added + removed
    wordDiff.forEach(function (part) {
      if (part.added) {
        part.changed = true;
        addedWords.push(part);
      } else if (part.removed) {
        part.changed = true;
        removedWords.push(part);
      } else {
        addedWords.push(part);
        removedWords.push(part);
      }
    });
  }

  return {
    addedWords: addedWords,
    removedWords: removedWords
  };
}

module.exports = {
  computeWordDiff: computeWordDiff
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9pZ2F3YXRhaWljaGkvLmF0b20vcGFja2FnZXMvZ2l0LXRpbWUtbWFjaGluZS9ub2RlX21vZHVsZXMvc3BsaXQtZGlmZi9saWIvY29tcHV0ZS13b3JkLWRpZmYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOztBQUVaLFNBQVMsZUFBZSxDQUFDLE9BQWUsRUFBRSxPQUFlLEVBQVk7QUFDbkUsTUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLE1BQUksWUFBWSxHQUFHLEVBQUUsQ0FBQzs7QUFFdEIsTUFBSSxPQUFPLElBQUksT0FBTyxFQUFFOztBQUN0QixRQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsUUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQzs7O0FBRzNELFlBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJLEVBQUk7QUFDdkIsVUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQ2QsWUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDcEIsa0JBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7T0FDdkIsTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDdkIsWUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDcEIsb0JBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7T0FDekIsTUFBTTtBQUNMLGtCQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RCLG9CQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO09BQ3pCO0tBQ0YsQ0FBQyxDQUFDO0dBQ0o7O0FBRUQsU0FBTztBQUNMLGNBQVUsRUFBVixVQUFVO0FBQ1YsZ0JBQVksRUFBWixZQUFZO0dBQ2IsQ0FBQztDQUNIOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZixpQkFBZSxFQUFmLGVBQWU7Q0FDaEIsQ0FBQyIsImZpbGUiOiIvVXNlcnMvaWdhd2F0YWlpY2hpLy5hdG9tL3BhY2thZ2VzL2dpdC10aW1lLW1hY2hpbmUvbm9kZV9tb2R1bGVzL3NwbGl0LWRpZmYvbGliL2NvbXB1dGUtd29yZC1kaWZmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG5cbmZ1bmN0aW9uIGNvbXB1dGVXb3JkRGlmZihvbGRUZXh0OiBzdHJpbmcsIG5ld1RleHQ6IHN0cmluZyk6IFdvcmREaWZmIHtcbiAgdmFyIGFkZGVkV29yZHMgPSBbXTtcbiAgdmFyIHJlbW92ZWRXb3JkcyA9IFtdO1xuXG4gIGlmIChvbGRUZXh0ICYmIG5ld1RleHQpIHsgLy8gZGVmZW5zaXZlIGZpeCBmb3IgIzYwXG4gICAgdmFyIEpzRGlmZiA9IHJlcXVpcmUoJ2RpZmYnKTtcbiAgICB2YXIgd29yZERpZmYgPSBKc0RpZmYuZGlmZldvcmRzV2l0aFNwYWNlKG9sZFRleHQsIG5ld1RleHQpO1xuXG4gICAgLy8gc3BsaXQgaW50byB0d28gbGlzdHM6IGFkZGVkICsgcmVtb3ZlZFxuICAgIHdvcmREaWZmLmZvckVhY2gocGFydCA9PiB7XG4gICAgICBpZiAocGFydC5hZGRlZCkge1xuICAgICAgICBwYXJ0LmNoYW5nZWQgPSB0cnVlO1xuICAgICAgICBhZGRlZFdvcmRzLnB1c2gocGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHBhcnQucmVtb3ZlZCkge1xuICAgICAgICBwYXJ0LmNoYW5nZWQgPSB0cnVlO1xuICAgICAgICByZW1vdmVkV29yZHMucHVzaChwYXJ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFkZGVkV29yZHMucHVzaChwYXJ0KTtcbiAgICAgICAgcmVtb3ZlZFdvcmRzLnB1c2gocGFydCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGFkZGVkV29yZHMsXG4gICAgcmVtb3ZlZFdvcmRzLFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcHV0ZVdvcmREaWZmXG59O1xuIl19